// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "llr.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic llr::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic llr::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> llr::ap_ST_fsm_state1 = "1";
const sc_lv<4> llr::ap_ST_fsm_state2 = "10";
const sc_lv<4> llr::ap_ST_fsm_state3 = "100";
const sc_lv<4> llr::ap_ST_fsm_state4 = "1000";
const sc_lv<32> llr::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool llr::ap_const_boolean_1 = true;
const sc_lv<1> llr::ap_const_lv1_0 = "0";
const sc_lv<1> llr::ap_const_lv1_1 = "1";
const sc_lv<2> llr::ap_const_lv2_0 = "00";
const sc_lv<2> llr::ap_const_lv2_2 = "10";
const sc_lv<2> llr::ap_const_lv2_3 = "11";
const sc_lv<2> llr::ap_const_lv2_1 = "1";
const sc_lv<32> llr::ap_const_lv32_2 = "10";
const sc_lv<32> llr::ap_const_lv32_3 = "11";
const sc_lv<32> llr::ap_const_lv32_1 = "1";
const bool llr::ap_const_boolean_0 = false;
const sc_lv<32> llr::ap_const_lv32_FC000004 = "11111100000000000000000000000100";
const sc_lv<8> llr::ap_const_lv8_10 = "10000";
const sc_lv<8> llr::ap_const_lv8_5 = "101";
const sc_lv<64> llr::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<32> llr::ap_const_lv32_7F = "1111111";
const sc_lv<127> llr::ap_const_lv127_0 = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<128> llr::ap_const_lv128_lc_1 = "1111111";
const sc_lv<128> llr::ap_const_lv128_lc_2 = "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000001";

llr::llr(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( dt_V_data_V_0_vld_out );

    SC_METHOD(thread_ap_block_state1_io);
    sensitive << ( control_V_1_ack_in );
    sensitive << ( din_words_V_data_V_1_ack_in );
    sensitive << ( dout_words_V_data_V_1_ack_in );

    SC_METHOD(thread_ap_block_state2_io);
    sensitive << ( control_V_1_ack_in );
    sensitive << ( din_words_V_data_V_1_ack_in );
    sensitive << ( dout_words_V_data_V_1_ack_in );

    SC_METHOD(thread_ap_block_state3);
    sensitive << ( din_V_data_V_1_ack_in );
    sensitive << ( din_V_tlast_1_ack_in );
    sensitive << ( control_V_1_ack_in );
    sensitive << ( din_words_V_data_V_1_ack_in );
    sensitive << ( din_words_V_tlast_1_ack_in );
    sensitive << ( dout_words_V_data_V_1_ack_in );
    sensitive << ( dout_words_V_tlast_1_ack_in );

    SC_METHOD(thread_ap_block_state3_io);
    sensitive << ( din_V_data_V_1_ack_in );
    sensitive << ( tmp_5_fu_135_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( din_V_data_V_1_ack_in );
    sensitive << ( din_V_data_V_1_state );
    sensitive << ( din_V_tlast_1_ack_in );
    sensitive << ( din_V_tlast_1_state );
    sensitive << ( control_V_1_ack_in );
    sensitive << ( control_V_1_state );
    sensitive << ( din_words_V_data_V_1_ack_in );
    sensitive << ( din_words_V_data_V_1_state );
    sensitive << ( din_words_V_tlast_1_ack_in );
    sensitive << ( din_words_V_tlast_1_state );
    sensitive << ( dout_words_V_data_V_1_ack_in );
    sensitive << ( dout_words_V_data_V_1_state );
    sensitive << ( dout_words_V_tlast_1_ack_in );
    sensitive << ( dout_words_V_tlast_1_state );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_5_fu_135_p2 );
    sensitive << ( ap_block_state3_io );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( din_V_data_V_1_ack_in );
    sensitive << ( din_V_data_V_1_state );
    sensitive << ( din_V_tlast_1_ack_in );
    sensitive << ( din_V_tlast_1_state );
    sensitive << ( control_V_1_ack_in );
    sensitive << ( control_V_1_state );
    sensitive << ( din_words_V_data_V_1_ack_in );
    sensitive << ( din_words_V_data_V_1_state );
    sensitive << ( din_words_V_tlast_1_ack_in );
    sensitive << ( din_words_V_tlast_1_state );
    sensitive << ( dout_words_V_data_V_1_ack_in );
    sensitive << ( dout_words_V_data_V_1_state );
    sensitive << ( dout_words_V_tlast_1_ack_in );
    sensitive << ( dout_words_V_tlast_1_state );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_5_fu_135_p2 );
    sensitive << ( ap_block_state3_io );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_control_V_1_ack_in);
    sensitive << ( control_V_1_state );

    SC_METHOD(thread_control_V_1_ack_out);
    sensitive << ( control_V_TREADY );

    SC_METHOD(thread_control_V_1_data_out);
    sensitive << ( control_V_1_sel );

    SC_METHOD(thread_control_V_1_sel);
    sensitive << ( control_V_1_sel_rd );

    SC_METHOD(thread_control_V_1_vld_in);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( dt_V_data_V_0_vld_out );
    sensitive << ( ap_block_state1_io );

    SC_METHOD(thread_control_V_1_vld_out);
    sensitive << ( control_V_1_state );

    SC_METHOD(thread_control_V_TDATA);
    sensitive << ( control_V_1_data_out );

    SC_METHOD(thread_control_V_TDATA_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( control_V_1_state );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_control_V_TVALID);
    sensitive << ( control_V_1_state );

    SC_METHOD(thread_din_TDATA);
    sensitive << ( din_V_data_V_1_data_out );

    SC_METHOD(thread_din_TDATA_blk_n);
    sensitive << ( din_V_data_V_1_state );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_5_fu_135_p2 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_din_TLAST);
    sensitive << ( din_V_tlast_1_data_out );

    SC_METHOD(thread_din_TVALID);
    sensitive << ( din_V_tlast_1_state );

    SC_METHOD(thread_din_V_data_V_1_ack_in);
    sensitive << ( din_V_data_V_1_state );

    SC_METHOD(thread_din_V_data_V_1_ack_out);
    sensitive << ( din_TREADY );

    SC_METHOD(thread_din_V_data_V_1_data_out);
    sensitive << ( din_V_data_V_1_payload_A );
    sensitive << ( din_V_data_V_1_payload_B );
    sensitive << ( din_V_data_V_1_sel );

    SC_METHOD(thread_din_V_data_V_1_load_A);
    sensitive << ( din_V_data_V_1_sel_wr );
    sensitive << ( din_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_din_V_data_V_1_load_B);
    sensitive << ( din_V_data_V_1_sel_wr );
    sensitive << ( din_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_din_V_data_V_1_sel);
    sensitive << ( din_V_data_V_1_sel_rd );

    SC_METHOD(thread_din_V_data_V_1_state_cmp_full);
    sensitive << ( din_V_data_V_1_state );

    SC_METHOD(thread_din_V_data_V_1_vld_in);
    sensitive << ( din_V_data_V_1_ack_in );
    sensitive << ( din_V_tlast_1_ack_in );
    sensitive << ( control_V_1_ack_in );
    sensitive << ( din_words_V_data_V_1_ack_in );
    sensitive << ( din_words_V_tlast_1_ack_in );
    sensitive << ( dout_words_V_data_V_1_ack_in );
    sensitive << ( dout_words_V_tlast_1_ack_in );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_5_fu_135_p2 );
    sensitive << ( ap_block_state3_io );

    SC_METHOD(thread_din_V_data_V_1_vld_out);
    sensitive << ( din_V_data_V_1_state );

    SC_METHOD(thread_din_V_tlast_1_ack_in);
    sensitive << ( din_V_tlast_1_state );

    SC_METHOD(thread_din_V_tlast_1_ack_out);
    sensitive << ( din_TREADY );

    SC_METHOD(thread_din_V_tlast_1_data_out);
    sensitive << ( din_V_tlast_1_payload_A );
    sensitive << ( din_V_tlast_1_payload_B );
    sensitive << ( din_V_tlast_1_sel );

    SC_METHOD(thread_din_V_tlast_1_load_A);
    sensitive << ( din_V_tlast_1_sel_wr );
    sensitive << ( din_V_tlast_1_state_cmp_full );

    SC_METHOD(thread_din_V_tlast_1_load_B);
    sensitive << ( din_V_tlast_1_sel_wr );
    sensitive << ( din_V_tlast_1_state_cmp_full );

    SC_METHOD(thread_din_V_tlast_1_sel);
    sensitive << ( din_V_tlast_1_sel_rd );

    SC_METHOD(thread_din_V_tlast_1_state_cmp_full);
    sensitive << ( din_V_tlast_1_state );

    SC_METHOD(thread_din_V_tlast_1_vld_in);
    sensitive << ( din_V_data_V_1_ack_in );
    sensitive << ( din_V_tlast_1_ack_in );
    sensitive << ( control_V_1_ack_in );
    sensitive << ( din_words_V_data_V_1_ack_in );
    sensitive << ( din_words_V_tlast_1_ack_in );
    sensitive << ( dout_words_V_data_V_1_ack_in );
    sensitive << ( dout_words_V_tlast_1_ack_in );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_5_fu_135_p2 );
    sensitive << ( ap_block_state3_io );

    SC_METHOD(thread_din_V_tlast_1_vld_out);
    sensitive << ( din_V_tlast_1_state );

    SC_METHOD(thread_din_words_TDATA);
    sensitive << ( din_words_V_data_V_1_data_out );

    SC_METHOD(thread_din_words_TDATA_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( din_words_V_data_V_1_state );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_din_words_TLAST);
    sensitive << ( din_words_V_tlast_1_data_out );

    SC_METHOD(thread_din_words_TVALID);
    sensitive << ( din_words_V_tlast_1_state );

    SC_METHOD(thread_din_words_V_data_V_1_ack_in);
    sensitive << ( din_words_V_data_V_1_state );

    SC_METHOD(thread_din_words_V_data_V_1_ack_out);
    sensitive << ( din_words_TREADY );

    SC_METHOD(thread_din_words_V_data_V_1_data_out);
    sensitive << ( din_words_V_data_V_1_sel );

    SC_METHOD(thread_din_words_V_data_V_1_sel);
    sensitive << ( din_words_V_data_V_1_sel_rd );

    SC_METHOD(thread_din_words_V_data_V_1_vld_in);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( dt_V_data_V_0_vld_out );
    sensitive << ( ap_block_state1_io );

    SC_METHOD(thread_din_words_V_data_V_1_vld_out);
    sensitive << ( din_words_V_data_V_1_state );

    SC_METHOD(thread_din_words_V_tlast_1_ack_in);
    sensitive << ( din_words_V_tlast_1_state );

    SC_METHOD(thread_din_words_V_tlast_1_ack_out);
    sensitive << ( din_words_TREADY );

    SC_METHOD(thread_din_words_V_tlast_1_data_out);
    sensitive << ( din_words_V_tlast_1_sel );

    SC_METHOD(thread_din_words_V_tlast_1_sel);
    sensitive << ( din_words_V_tlast_1_sel_rd );

    SC_METHOD(thread_din_words_V_tlast_1_vld_in);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( dt_V_data_V_0_vld_out );
    sensitive << ( ap_block_state1_io );

    SC_METHOD(thread_din_words_V_tlast_1_vld_out);
    sensitive << ( din_words_V_tlast_1_state );

    SC_METHOD(thread_dout_words_TDATA);
    sensitive << ( dout_words_V_data_V_1_data_out );

    SC_METHOD(thread_dout_words_TDATA_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( dout_words_V_data_V_1_state );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_dout_words_TLAST);
    sensitive << ( dout_words_V_tlast_1_data_out );

    SC_METHOD(thread_dout_words_TVALID);
    sensitive << ( dout_words_V_tlast_1_state );

    SC_METHOD(thread_dout_words_V_data_V_1_ack_in);
    sensitive << ( dout_words_V_data_V_1_state );

    SC_METHOD(thread_dout_words_V_data_V_1_ack_out);
    sensitive << ( dout_words_TREADY );

    SC_METHOD(thread_dout_words_V_data_V_1_data_out);
    sensitive << ( dout_words_V_data_V_1_sel );

    SC_METHOD(thread_dout_words_V_data_V_1_sel);
    sensitive << ( dout_words_V_data_V_1_sel_rd );

    SC_METHOD(thread_dout_words_V_data_V_1_vld_in);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( dt_V_data_V_0_vld_out );
    sensitive << ( ap_block_state1_io );

    SC_METHOD(thread_dout_words_V_data_V_1_vld_out);
    sensitive << ( dout_words_V_data_V_1_state );

    SC_METHOD(thread_dout_words_V_tlast_1_ack_in);
    sensitive << ( dout_words_V_tlast_1_state );

    SC_METHOD(thread_dout_words_V_tlast_1_ack_out);
    sensitive << ( dout_words_TREADY );

    SC_METHOD(thread_dout_words_V_tlast_1_data_out);
    sensitive << ( dout_words_V_tlast_1_sel );

    SC_METHOD(thread_dout_words_V_tlast_1_sel);
    sensitive << ( dout_words_V_tlast_1_sel_rd );

    SC_METHOD(thread_dout_words_V_tlast_1_vld_in);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( dt_V_data_V_0_vld_out );
    sensitive << ( ap_block_state1_io );

    SC_METHOD(thread_dout_words_V_tlast_1_vld_out);
    sensitive << ( dout_words_V_tlast_1_state );

    SC_METHOD(thread_dt_TDATA_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( dt_V_data_V_0_state );

    SC_METHOD(thread_dt_TREADY);
    sensitive << ( dt_V_tlast_0_state );

    SC_METHOD(thread_dt_V_data_V_0_ack_in);
    sensitive << ( dt_V_data_V_0_state );

    SC_METHOD(thread_dt_V_data_V_0_ack_out);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( dt_V_data_V_0_vld_out );
    sensitive << ( ap_block_state1_io );

    SC_METHOD(thread_dt_V_data_V_0_data_out);
    sensitive << ( dt_V_data_V_0_payload_A );
    sensitive << ( dt_V_data_V_0_payload_B );
    sensitive << ( dt_V_data_V_0_sel );

    SC_METHOD(thread_dt_V_data_V_0_load_A);
    sensitive << ( dt_V_data_V_0_sel_wr );
    sensitive << ( dt_V_data_V_0_state_cmp_full );

    SC_METHOD(thread_dt_V_data_V_0_load_B);
    sensitive << ( dt_V_data_V_0_sel_wr );
    sensitive << ( dt_V_data_V_0_state_cmp_full );

    SC_METHOD(thread_dt_V_data_V_0_sel);
    sensitive << ( dt_V_data_V_0_sel_rd );

    SC_METHOD(thread_dt_V_data_V_0_state_cmp_full);
    sensitive << ( dt_V_data_V_0_state );

    SC_METHOD(thread_dt_V_data_V_0_vld_in);
    sensitive << ( dt_TVALID );

    SC_METHOD(thread_dt_V_data_V_0_vld_out);
    sensitive << ( dt_V_data_V_0_state );

    SC_METHOD(thread_dt_V_tlast_0_ack_out);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( dt_V_data_V_0_vld_out );
    sensitive << ( ap_block_state1_io );

    SC_METHOD(thread_dt_V_tlast_0_vld_in);
    sensitive << ( dt_TVALID );

    SC_METHOD(thread_temp_data_V_1_fu_151_p1);
    sensitive << ( tmp_2_fu_141_p4 );

    SC_METHOD(thread_tmp_1_fu_131_p1);
    sensitive << ( lhs_V_reg_114 );

    SC_METHOD(thread_tmp_2_fu_141_p4);
    sensitive << ( lhs_V_reg_114 );

    SC_METHOD(thread_tmp_5_fu_135_p2);
    sensitive << ( din_V_data_V_1_ack_in );
    sensitive << ( din_V_tlast_1_ack_in );
    sensitive << ( control_V_1_ack_in );
    sensitive << ( din_words_V_data_V_1_ack_in );
    sensitive << ( din_words_V_tlast_1_ack_in );
    sensitive << ( dout_words_V_data_V_1_ack_in );
    sensitive << ( dout_words_V_tlast_1_ack_in );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_block_state3_io );
    sensitive << ( tmp_fu_127_p1 );

    SC_METHOD(thread_tmp_data_V_4_cast_fu_162_p3);
    sensitive << ( tmp_1_fu_131_p1 );

    SC_METHOD(thread_tmp_fu_127_p1);
    sensitive << ( lhs_V_reg_114 );

    SC_METHOD(thread_tmp_tlast_fu_155_p2);
    sensitive << ( din_V_data_V_1_ack_in );
    sensitive << ( din_V_tlast_1_ack_in );
    sensitive << ( control_V_1_ack_in );
    sensitive << ( din_words_V_data_V_1_ack_in );
    sensitive << ( din_words_V_tlast_1_ack_in );
    sensitive << ( dout_words_V_data_V_1_ack_in );
    sensitive << ( dout_words_V_tlast_1_ack_in );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_5_fu_135_p2 );
    sensitive << ( ap_block_state3_io );
    sensitive << ( tmp_2_fu_141_p4 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( dt_V_data_V_0_vld_out );
    sensitive << ( din_V_data_V_1_ack_in );
    sensitive << ( din_V_data_V_1_state );
    sensitive << ( din_V_tlast_1_ack_in );
    sensitive << ( din_V_tlast_1_state );
    sensitive << ( control_V_1_ack_in );
    sensitive << ( control_V_1_state );
    sensitive << ( din_words_V_data_V_1_ack_in );
    sensitive << ( din_words_V_data_V_1_state );
    sensitive << ( din_words_V_tlast_1_ack_in );
    sensitive << ( din_words_V_tlast_1_state );
    sensitive << ( dout_words_V_data_V_1_ack_in );
    sensitive << ( dout_words_V_data_V_1_state );
    sensitive << ( dout_words_V_tlast_1_ack_in );
    sensitive << ( dout_words_V_tlast_1_state );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_5_fu_135_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_block_state1_io );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_block_state2_io );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0001";
    dt_V_data_V_0_sel_rd = SC_LOGIC_0;
    dt_V_data_V_0_sel_wr = SC_LOGIC_0;
    dt_V_data_V_0_state = "00";
    dt_V_tlast_0_state = "00";
    din_V_data_V_1_sel_rd = SC_LOGIC_0;
    din_V_data_V_1_sel_wr = SC_LOGIC_0;
    din_V_data_V_1_state = "00";
    din_V_tlast_1_sel_rd = SC_LOGIC_0;
    din_V_tlast_1_sel_wr = SC_LOGIC_0;
    din_V_tlast_1_state = "00";
    control_V_1_sel_rd = SC_LOGIC_0;
    control_V_1_state = "00";
    din_words_V_data_V_1_sel_rd = SC_LOGIC_0;
    din_words_V_data_V_1_state = "00";
    din_words_V_tlast_1_sel_rd = SC_LOGIC_0;
    din_words_V_tlast_1_state = "00";
    dout_words_V_data_V_1_sel_rd = SC_LOGIC_0;
    dout_words_V_data_V_1_state = "00";
    dout_words_V_tlast_1_sel_rd = SC_LOGIC_0;
    dout_words_V_tlast_1_state = "00";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "llr_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, dt_TDATA, "(port)dt_TDATA");
    sc_trace(mVcdFile, dt_TVALID, "(port)dt_TVALID");
    sc_trace(mVcdFile, dt_TREADY, "(port)dt_TREADY");
    sc_trace(mVcdFile, dt_TLAST, "(port)dt_TLAST");
    sc_trace(mVcdFile, din_TDATA, "(port)din_TDATA");
    sc_trace(mVcdFile, din_TVALID, "(port)din_TVALID");
    sc_trace(mVcdFile, din_TREADY, "(port)din_TREADY");
    sc_trace(mVcdFile, din_TLAST, "(port)din_TLAST");
    sc_trace(mVcdFile, control_V_TDATA, "(port)control_V_TDATA");
    sc_trace(mVcdFile, control_V_TVALID, "(port)control_V_TVALID");
    sc_trace(mVcdFile, control_V_TREADY, "(port)control_V_TREADY");
    sc_trace(mVcdFile, din_words_TDATA, "(port)din_words_TDATA");
    sc_trace(mVcdFile, din_words_TVALID, "(port)din_words_TVALID");
    sc_trace(mVcdFile, din_words_TREADY, "(port)din_words_TREADY");
    sc_trace(mVcdFile, din_words_TLAST, "(port)din_words_TLAST");
    sc_trace(mVcdFile, dout_words_TDATA, "(port)dout_words_TDATA");
    sc_trace(mVcdFile, dout_words_TVALID, "(port)dout_words_TVALID");
    sc_trace(mVcdFile, dout_words_TREADY, "(port)dout_words_TREADY");
    sc_trace(mVcdFile, dout_words_TLAST, "(port)dout_words_TLAST");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, dt_V_data_V_0_data_out, "dt_V_data_V_0_data_out");
    sc_trace(mVcdFile, dt_V_data_V_0_vld_in, "dt_V_data_V_0_vld_in");
    sc_trace(mVcdFile, dt_V_data_V_0_vld_out, "dt_V_data_V_0_vld_out");
    sc_trace(mVcdFile, dt_V_data_V_0_ack_in, "dt_V_data_V_0_ack_in");
    sc_trace(mVcdFile, dt_V_data_V_0_ack_out, "dt_V_data_V_0_ack_out");
    sc_trace(mVcdFile, dt_V_data_V_0_payload_A, "dt_V_data_V_0_payload_A");
    sc_trace(mVcdFile, dt_V_data_V_0_payload_B, "dt_V_data_V_0_payload_B");
    sc_trace(mVcdFile, dt_V_data_V_0_sel_rd, "dt_V_data_V_0_sel_rd");
    sc_trace(mVcdFile, dt_V_data_V_0_sel_wr, "dt_V_data_V_0_sel_wr");
    sc_trace(mVcdFile, dt_V_data_V_0_sel, "dt_V_data_V_0_sel");
    sc_trace(mVcdFile, dt_V_data_V_0_load_A, "dt_V_data_V_0_load_A");
    sc_trace(mVcdFile, dt_V_data_V_0_load_B, "dt_V_data_V_0_load_B");
    sc_trace(mVcdFile, dt_V_data_V_0_state, "dt_V_data_V_0_state");
    sc_trace(mVcdFile, dt_V_data_V_0_state_cmp_full, "dt_V_data_V_0_state_cmp_full");
    sc_trace(mVcdFile, dt_V_tlast_0_vld_in, "dt_V_tlast_0_vld_in");
    sc_trace(mVcdFile, dt_V_tlast_0_ack_out, "dt_V_tlast_0_ack_out");
    sc_trace(mVcdFile, dt_V_tlast_0_state, "dt_V_tlast_0_state");
    sc_trace(mVcdFile, din_V_data_V_1_data_out, "din_V_data_V_1_data_out");
    sc_trace(mVcdFile, din_V_data_V_1_vld_in, "din_V_data_V_1_vld_in");
    sc_trace(mVcdFile, din_V_data_V_1_vld_out, "din_V_data_V_1_vld_out");
    sc_trace(mVcdFile, din_V_data_V_1_ack_in, "din_V_data_V_1_ack_in");
    sc_trace(mVcdFile, din_V_data_V_1_ack_out, "din_V_data_V_1_ack_out");
    sc_trace(mVcdFile, din_V_data_V_1_payload_A, "din_V_data_V_1_payload_A");
    sc_trace(mVcdFile, din_V_data_V_1_payload_B, "din_V_data_V_1_payload_B");
    sc_trace(mVcdFile, din_V_data_V_1_sel_rd, "din_V_data_V_1_sel_rd");
    sc_trace(mVcdFile, din_V_data_V_1_sel_wr, "din_V_data_V_1_sel_wr");
    sc_trace(mVcdFile, din_V_data_V_1_sel, "din_V_data_V_1_sel");
    sc_trace(mVcdFile, din_V_data_V_1_load_A, "din_V_data_V_1_load_A");
    sc_trace(mVcdFile, din_V_data_V_1_load_B, "din_V_data_V_1_load_B");
    sc_trace(mVcdFile, din_V_data_V_1_state, "din_V_data_V_1_state");
    sc_trace(mVcdFile, din_V_data_V_1_state_cmp_full, "din_V_data_V_1_state_cmp_full");
    sc_trace(mVcdFile, din_V_tlast_1_data_out, "din_V_tlast_1_data_out");
    sc_trace(mVcdFile, din_V_tlast_1_vld_in, "din_V_tlast_1_vld_in");
    sc_trace(mVcdFile, din_V_tlast_1_vld_out, "din_V_tlast_1_vld_out");
    sc_trace(mVcdFile, din_V_tlast_1_ack_in, "din_V_tlast_1_ack_in");
    sc_trace(mVcdFile, din_V_tlast_1_ack_out, "din_V_tlast_1_ack_out");
    sc_trace(mVcdFile, din_V_tlast_1_payload_A, "din_V_tlast_1_payload_A");
    sc_trace(mVcdFile, din_V_tlast_1_payload_B, "din_V_tlast_1_payload_B");
    sc_trace(mVcdFile, din_V_tlast_1_sel_rd, "din_V_tlast_1_sel_rd");
    sc_trace(mVcdFile, din_V_tlast_1_sel_wr, "din_V_tlast_1_sel_wr");
    sc_trace(mVcdFile, din_V_tlast_1_sel, "din_V_tlast_1_sel");
    sc_trace(mVcdFile, din_V_tlast_1_load_A, "din_V_tlast_1_load_A");
    sc_trace(mVcdFile, din_V_tlast_1_load_B, "din_V_tlast_1_load_B");
    sc_trace(mVcdFile, din_V_tlast_1_state, "din_V_tlast_1_state");
    sc_trace(mVcdFile, din_V_tlast_1_state_cmp_full, "din_V_tlast_1_state_cmp_full");
    sc_trace(mVcdFile, control_V_1_data_out, "control_V_1_data_out");
    sc_trace(mVcdFile, control_V_1_vld_in, "control_V_1_vld_in");
    sc_trace(mVcdFile, control_V_1_vld_out, "control_V_1_vld_out");
    sc_trace(mVcdFile, control_V_1_ack_in, "control_V_1_ack_in");
    sc_trace(mVcdFile, control_V_1_ack_out, "control_V_1_ack_out");
    sc_trace(mVcdFile, control_V_1_sel_rd, "control_V_1_sel_rd");
    sc_trace(mVcdFile, control_V_1_sel, "control_V_1_sel");
    sc_trace(mVcdFile, control_V_1_state, "control_V_1_state");
    sc_trace(mVcdFile, din_words_V_data_V_1_data_out, "din_words_V_data_V_1_data_out");
    sc_trace(mVcdFile, din_words_V_data_V_1_vld_in, "din_words_V_data_V_1_vld_in");
    sc_trace(mVcdFile, din_words_V_data_V_1_vld_out, "din_words_V_data_V_1_vld_out");
    sc_trace(mVcdFile, din_words_V_data_V_1_ack_in, "din_words_V_data_V_1_ack_in");
    sc_trace(mVcdFile, din_words_V_data_V_1_ack_out, "din_words_V_data_V_1_ack_out");
    sc_trace(mVcdFile, din_words_V_data_V_1_sel_rd, "din_words_V_data_V_1_sel_rd");
    sc_trace(mVcdFile, din_words_V_data_V_1_sel, "din_words_V_data_V_1_sel");
    sc_trace(mVcdFile, din_words_V_data_V_1_state, "din_words_V_data_V_1_state");
    sc_trace(mVcdFile, din_words_V_tlast_1_data_out, "din_words_V_tlast_1_data_out");
    sc_trace(mVcdFile, din_words_V_tlast_1_vld_in, "din_words_V_tlast_1_vld_in");
    sc_trace(mVcdFile, din_words_V_tlast_1_vld_out, "din_words_V_tlast_1_vld_out");
    sc_trace(mVcdFile, din_words_V_tlast_1_ack_in, "din_words_V_tlast_1_ack_in");
    sc_trace(mVcdFile, din_words_V_tlast_1_ack_out, "din_words_V_tlast_1_ack_out");
    sc_trace(mVcdFile, din_words_V_tlast_1_sel_rd, "din_words_V_tlast_1_sel_rd");
    sc_trace(mVcdFile, din_words_V_tlast_1_sel, "din_words_V_tlast_1_sel");
    sc_trace(mVcdFile, din_words_V_tlast_1_state, "din_words_V_tlast_1_state");
    sc_trace(mVcdFile, dout_words_V_data_V_1_data_out, "dout_words_V_data_V_1_data_out");
    sc_trace(mVcdFile, dout_words_V_data_V_1_vld_in, "dout_words_V_data_V_1_vld_in");
    sc_trace(mVcdFile, dout_words_V_data_V_1_vld_out, "dout_words_V_data_V_1_vld_out");
    sc_trace(mVcdFile, dout_words_V_data_V_1_ack_in, "dout_words_V_data_V_1_ack_in");
    sc_trace(mVcdFile, dout_words_V_data_V_1_ack_out, "dout_words_V_data_V_1_ack_out");
    sc_trace(mVcdFile, dout_words_V_data_V_1_sel_rd, "dout_words_V_data_V_1_sel_rd");
    sc_trace(mVcdFile, dout_words_V_data_V_1_sel, "dout_words_V_data_V_1_sel");
    sc_trace(mVcdFile, dout_words_V_data_V_1_state, "dout_words_V_data_V_1_state");
    sc_trace(mVcdFile, dout_words_V_tlast_1_data_out, "dout_words_V_tlast_1_data_out");
    sc_trace(mVcdFile, dout_words_V_tlast_1_vld_in, "dout_words_V_tlast_1_vld_in");
    sc_trace(mVcdFile, dout_words_V_tlast_1_vld_out, "dout_words_V_tlast_1_vld_out");
    sc_trace(mVcdFile, dout_words_V_tlast_1_ack_in, "dout_words_V_tlast_1_ack_in");
    sc_trace(mVcdFile, dout_words_V_tlast_1_ack_out, "dout_words_V_tlast_1_ack_out");
    sc_trace(mVcdFile, dout_words_V_tlast_1_sel_rd, "dout_words_V_tlast_1_sel_rd");
    sc_trace(mVcdFile, dout_words_V_tlast_1_sel, "dout_words_V_tlast_1_sel");
    sc_trace(mVcdFile, dout_words_V_tlast_1_state, "dout_words_V_tlast_1_state");
    sc_trace(mVcdFile, dt_TDATA_blk_n, "dt_TDATA_blk_n");
    sc_trace(mVcdFile, din_TDATA_blk_n, "din_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_5_fu_135_p2, "tmp_5_fu_135_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, control_V_TDATA_blk_n, "control_V_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, din_words_TDATA_blk_n, "din_words_TDATA_blk_n");
    sc_trace(mVcdFile, dout_words_TDATA_blk_n, "dout_words_TDATA_blk_n");
    sc_trace(mVcdFile, tmp_data_V_reg_171, "tmp_data_V_reg_171");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, ap_block_state1_io, "ap_block_state1_io");
    sc_trace(mVcdFile, temp_data_V_1_fu_151_p1, "temp_data_V_1_fu_151_p1");
    sc_trace(mVcdFile, temp_data_V_1_reg_179, "temp_data_V_1_reg_179");
    sc_trace(mVcdFile, ap_block_state3, "ap_block_state3");
    sc_trace(mVcdFile, ap_block_state3_io, "ap_block_state3_io");
    sc_trace(mVcdFile, tmp_tlast_fu_155_p2, "tmp_tlast_fu_155_p2");
    sc_trace(mVcdFile, tmp_data_V_4_cast_fu_162_p3, "tmp_data_V_4_cast_fu_162_p3");
    sc_trace(mVcdFile, lhs_V_reg_114, "lhs_V_reg_114");
    sc_trace(mVcdFile, ap_block_state2_io, "ap_block_state2_io");
    sc_trace(mVcdFile, tmp_fu_127_p1, "tmp_fu_127_p1");
    sc_trace(mVcdFile, tmp_2_fu_141_p4, "tmp_2_fu_141_p4");
    sc_trace(mVcdFile, tmp_1_fu_131_p1, "tmp_1_fu_131_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("llr.hdltvin.dat");
    mHdltvoutHandle.open("llr.hdltvout.dat");
}

llr::~llr() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void llr::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        control_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, control_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, control_V_1_vld_out.read()))) {
            control_V_1_sel_rd =  (sc_logic) (~control_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        control_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, control_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, control_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, control_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, control_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, control_V_1_state.read())))) {
            control_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, control_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, control_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, control_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, control_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, control_V_1_state.read())))) {
            control_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, control_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, control_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, control_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, control_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, control_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, control_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, control_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, control_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, control_V_1_ack_out.read()))))) {
            control_V_1_state = ap_const_lv2_3;
        } else {
            control_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        din_V_data_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, din_V_data_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, din_V_data_V_1_vld_out.read()))) {
            din_V_data_V_1_sel_rd =  (sc_logic) (~din_V_data_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        din_V_data_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, din_V_data_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, din_V_data_V_1_ack_in.read()))) {
            din_V_data_V_1_sel_wr =  (sc_logic) (~din_V_data_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        din_V_data_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, din_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, din_V_data_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, din_V_data_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, din_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, din_V_data_V_1_state.read())))) {
            din_V_data_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, din_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, din_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, din_V_data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, din_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, din_V_data_V_1_state.read())))) {
            din_V_data_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, din_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, din_V_data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, din_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, din_V_data_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, din_V_data_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, din_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, din_V_data_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, din_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, din_V_data_V_1_ack_out.read()))))) {
            din_V_data_V_1_state = ap_const_lv2_3;
        } else {
            din_V_data_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        din_V_tlast_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, din_V_tlast_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, din_V_tlast_1_vld_out.read()))) {
            din_V_tlast_1_sel_rd =  (sc_logic) (~din_V_tlast_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        din_V_tlast_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, din_V_tlast_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, din_V_tlast_1_ack_in.read()))) {
            din_V_tlast_1_sel_wr =  (sc_logic) (~din_V_tlast_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        din_V_tlast_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, din_V_tlast_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, din_V_tlast_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, din_V_tlast_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, din_V_tlast_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, din_V_tlast_1_state.read())))) {
            din_V_tlast_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, din_V_tlast_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, din_V_tlast_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, din_V_tlast_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, din_V_tlast_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, din_V_tlast_1_state.read())))) {
            din_V_tlast_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, din_V_tlast_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, din_V_tlast_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, din_V_tlast_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, din_V_tlast_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, din_V_tlast_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, din_V_tlast_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, din_V_tlast_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, din_V_tlast_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, din_V_tlast_1_ack_out.read()))))) {
            din_V_tlast_1_state = ap_const_lv2_3;
        } else {
            din_V_tlast_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        din_words_V_data_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, din_words_V_data_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, din_words_V_data_V_1_vld_out.read()))) {
            din_words_V_data_V_1_sel_rd =  (sc_logic) (~din_words_V_data_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        din_words_V_data_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, din_words_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, din_words_V_data_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, din_words_V_data_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, din_words_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, din_words_V_data_V_1_state.read())))) {
            din_words_V_data_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, din_words_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, din_words_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, din_words_V_data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, din_words_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, din_words_V_data_V_1_state.read())))) {
            din_words_V_data_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, din_words_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, din_words_V_data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, din_words_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, din_words_V_data_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, din_words_V_data_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, din_words_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, din_words_V_data_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, din_words_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, din_words_V_data_V_1_ack_out.read()))))) {
            din_words_V_data_V_1_state = ap_const_lv2_3;
        } else {
            din_words_V_data_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        din_words_V_tlast_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, din_words_V_tlast_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, din_words_V_tlast_1_vld_out.read()))) {
            din_words_V_tlast_1_sel_rd =  (sc_logic) (~din_words_V_tlast_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        din_words_V_tlast_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, din_words_V_tlast_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, din_words_V_tlast_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, din_words_V_tlast_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, din_words_V_tlast_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, din_words_V_tlast_1_state.read())))) {
            din_words_V_tlast_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, din_words_V_tlast_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, din_words_V_tlast_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, din_words_V_tlast_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, din_words_V_tlast_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, din_words_V_tlast_1_state.read())))) {
            din_words_V_tlast_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, din_words_V_tlast_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, din_words_V_tlast_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, din_words_V_tlast_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, din_words_V_tlast_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, din_words_V_tlast_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, din_words_V_tlast_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, din_words_V_tlast_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, din_words_V_tlast_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, din_words_V_tlast_1_ack_out.read()))))) {
            din_words_V_tlast_1_state = ap_const_lv2_3;
        } else {
            din_words_V_tlast_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        dout_words_V_data_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, dout_words_V_data_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, dout_words_V_data_V_1_vld_out.read()))) {
            dout_words_V_data_V_1_sel_rd =  (sc_logic) (~dout_words_V_data_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        dout_words_V_data_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, dout_words_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, dout_words_V_data_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, dout_words_V_data_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, dout_words_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, dout_words_V_data_V_1_state.read())))) {
            dout_words_V_data_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, dout_words_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, dout_words_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, dout_words_V_data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, dout_words_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, dout_words_V_data_V_1_state.read())))) {
            dout_words_V_data_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, dout_words_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, dout_words_V_data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, dout_words_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, dout_words_V_data_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, dout_words_V_data_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, dout_words_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, dout_words_V_data_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, dout_words_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, dout_words_V_data_V_1_ack_out.read()))))) {
            dout_words_V_data_V_1_state = ap_const_lv2_3;
        } else {
            dout_words_V_data_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        dout_words_V_tlast_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, dout_words_V_tlast_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, dout_words_V_tlast_1_vld_out.read()))) {
            dout_words_V_tlast_1_sel_rd =  (sc_logic) (~dout_words_V_tlast_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        dout_words_V_tlast_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, dout_words_V_tlast_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, dout_words_V_tlast_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, dout_words_V_tlast_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, dout_words_V_tlast_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, dout_words_V_tlast_1_state.read())))) {
            dout_words_V_tlast_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, dout_words_V_tlast_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, dout_words_V_tlast_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, dout_words_V_tlast_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, dout_words_V_tlast_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, dout_words_V_tlast_1_state.read())))) {
            dout_words_V_tlast_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, dout_words_V_tlast_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, dout_words_V_tlast_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, dout_words_V_tlast_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, dout_words_V_tlast_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, dout_words_V_tlast_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, dout_words_V_tlast_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, dout_words_V_tlast_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, dout_words_V_tlast_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, dout_words_V_tlast_1_ack_out.read()))))) {
            dout_words_V_tlast_1_state = ap_const_lv2_3;
        } else {
            dout_words_V_tlast_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        dt_V_data_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, dt_V_data_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, dt_V_data_V_0_vld_out.read()))) {
            dt_V_data_V_0_sel_rd =  (sc_logic) (~dt_V_data_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        dt_V_data_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, dt_V_data_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, dt_V_data_V_0_ack_in.read()))) {
            dt_V_data_V_0_sel_wr =  (sc_logic) (~dt_V_data_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        dt_V_data_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, dt_V_data_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, dt_V_data_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(dt_V_data_V_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, dt_V_data_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(dt_V_data_V_0_state.read(), ap_const_lv2_2)))) {
            dt_V_data_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, dt_V_data_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, dt_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(dt_V_data_V_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, dt_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(dt_V_data_V_0_state.read(), ap_const_lv2_1)))) {
            dt_V_data_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, dt_V_data_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(dt_V_data_V_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, dt_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(dt_V_data_V_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(dt_V_data_V_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, dt_V_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, dt_V_data_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, dt_V_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, dt_V_data_V_0_ack_out.read()))))) {
            dt_V_data_V_0_state = ap_const_lv2_3;
        } else {
            dt_V_data_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        dt_V_tlast_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, dt_V_tlast_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, dt_V_tlast_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, dt_V_tlast_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, dt_V_tlast_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, dt_V_tlast_0_state.read())))) {
            dt_V_tlast_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, dt_V_tlast_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, dt_V_tlast_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, dt_V_tlast_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, dt_V_tlast_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, dt_V_tlast_0_state.read())))) {
            dt_V_tlast_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, dt_V_tlast_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, dt_V_tlast_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, dt_V_tlast_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, dt_V_tlast_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, dt_V_tlast_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, dt_V_tlast_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, dt_V_tlast_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, dt_V_tlast_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, dt_V_tlast_0_ack_out.read()))))) {
            dt_V_tlast_0_state = ap_const_lv2_3;
        } else {
            dt_V_tlast_0_state = ap_const_lv2_2;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(din_V_data_V_1_ack_in.read(), ap_const_logic_1))) {
        lhs_V_reg_114 = temp_data_V_1_reg_179.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(ap_block_state2_io.read(), ap_const_boolean_0))) {
        lhs_V_reg_114 = tmp_data_V_reg_171.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, din_V_data_V_1_load_A.read())) {
        din_V_data_V_1_payload_A = tmp_data_V_4_cast_fu_162_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, din_V_data_V_1_load_B.read())) {
        din_V_data_V_1_payload_B = tmp_data_V_4_cast_fu_162_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, din_V_tlast_1_load_A.read())) {
        din_V_tlast_1_payload_A =  (sc_logic) (tmp_tlast_fu_155_p2.read()[0]);
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, din_V_tlast_1_load_B.read())) {
        din_V_tlast_1_payload_B =  (sc_logic) (tmp_tlast_fu_155_p2.read()[0]);
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, dt_V_data_V_0_load_A.read())) {
        dt_V_data_V_0_payload_A = dt_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, dt_V_data_V_0_load_B.read())) {
        dt_V_data_V_0_payload_B = dt_TDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_135_p2.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, control_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, din_words_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dout_words_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, din_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, din_V_tlast_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, din_words_V_tlast_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dout_words_V_tlast_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())))) {
        temp_data_V_1_reg_179 = temp_data_V_1_fu_151_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dt_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read())))) {
        tmp_data_V_reg_171 = dt_V_data_V_0_data_out.read();
    }
}

void llr::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void llr::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void llr::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void llr::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void llr::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dt_V_data_V_0_vld_out.read()));
}

void llr::thread_ap_block_state1_io() {
    ap_block_state1_io = (esl_seteq<1,1,1>(ap_const_logic_0, control_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, din_words_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dout_words_V_data_V_1_ack_in.read()));
}

void llr::thread_ap_block_state2_io() {
    ap_block_state2_io = (esl_seteq<1,1,1>(ap_const_logic_0, control_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, din_words_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dout_words_V_data_V_1_ack_in.read()));
}

void llr::thread_ap_block_state3() {
    ap_block_state3 = (esl_seteq<1,1,1>(ap_const_logic_0, control_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, din_words_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dout_words_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, din_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, din_V_tlast_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, din_words_V_tlast_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dout_words_V_tlast_1_ack_in.read()));
}

void llr::thread_ap_block_state3_io() {
    ap_block_state3_io = (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_135_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, din_V_data_V_1_ack_in.read()));
}

void llr::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, control_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, din_words_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dout_words_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, din_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, din_V_tlast_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, din_words_V_tlast_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dout_words_V_tlast_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) && 
         esl_seteq<1,1,1>(ap_const_logic_0, din_V_data_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, din_V_tlast_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, control_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, din_words_V_data_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, din_words_V_tlast_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, dout_words_V_data_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, dout_words_V_tlast_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_5_fu_135_p2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void llr::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void llr::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, control_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, din_words_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dout_words_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, din_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, din_V_tlast_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, din_words_V_tlast_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dout_words_V_tlast_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) && 
         esl_seteq<1,1,1>(ap_const_logic_0, din_V_data_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, din_V_tlast_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, control_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, din_words_V_data_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, din_words_V_tlast_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, dout_words_V_data_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, dout_words_V_tlast_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_5_fu_135_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void llr::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void llr::thread_control_V_1_ack_in() {
    control_V_1_ack_in = control_V_1_state.read()[1];
}

void llr::thread_control_V_1_ack_out() {
    control_V_1_ack_out = control_V_TREADY.read();
}

void llr::thread_control_V_1_data_out() {
    control_V_1_data_out = ap_const_lv32_FC000004;
}

void llr::thread_control_V_1_sel() {
    control_V_1_sel = control_V_1_sel_rd.read();
}

void llr::thread_control_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dt_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read())))) {
        control_V_1_vld_in = ap_const_logic_1;
    } else {
        control_V_1_vld_in = ap_const_logic_0;
    }
}

void llr::thread_control_V_1_vld_out() {
    control_V_1_vld_out = control_V_1_state.read()[0];
}

void llr::thread_control_V_TDATA() {
    control_V_TDATA = control_V_1_data_out.read();
}

void llr::thread_control_V_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        control_V_TDATA_blk_n = control_V_1_state.read()[1];
    } else {
        control_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void llr::thread_control_V_TVALID() {
    control_V_TVALID = control_V_1_state.read()[0];
}

void llr::thread_din_TDATA() {
    din_TDATA = din_V_data_V_1_data_out.read();
}

void llr::thread_din_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_135_p2.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        din_TDATA_blk_n = din_V_data_V_1_state.read()[1];
    } else {
        din_TDATA_blk_n = ap_const_logic_1;
    }
}

void llr::thread_din_TLAST() {
    din_TLAST = din_V_tlast_1_data_out.read();
}

void llr::thread_din_TVALID() {
    din_TVALID = din_V_tlast_1_state.read()[0];
}

void llr::thread_din_V_data_V_1_ack_in() {
    din_V_data_V_1_ack_in = din_V_data_V_1_state.read()[1];
}

void llr::thread_din_V_data_V_1_ack_out() {
    din_V_data_V_1_ack_out = din_TREADY.read();
}

void llr::thread_din_V_data_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, din_V_data_V_1_sel.read())) {
        din_V_data_V_1_data_out = din_V_data_V_1_payload_B.read();
    } else {
        din_V_data_V_1_data_out = din_V_data_V_1_payload_A.read();
    }
}

void llr::thread_din_V_data_V_1_load_A() {
    din_V_data_V_1_load_A = (din_V_data_V_1_state_cmp_full.read() & ~din_V_data_V_1_sel_wr.read());
}

void llr::thread_din_V_data_V_1_load_B() {
    din_V_data_V_1_load_B = (din_V_data_V_1_sel_wr.read() & din_V_data_V_1_state_cmp_full.read());
}

void llr::thread_din_V_data_V_1_sel() {
    din_V_data_V_1_sel = din_V_data_V_1_sel_rd.read();
}

void llr::thread_din_V_data_V_1_state_cmp_full() {
    din_V_data_V_1_state_cmp_full =  (sc_logic) ((!din_V_data_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(din_V_data_V_1_state.read() != ap_const_lv2_1))[0];
}

void llr::thread_din_V_data_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_135_p2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, control_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, din_words_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dout_words_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, din_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, din_V_tlast_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, din_words_V_tlast_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dout_words_V_tlast_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())))) {
        din_V_data_V_1_vld_in = ap_const_logic_1;
    } else {
        din_V_data_V_1_vld_in = ap_const_logic_0;
    }
}

void llr::thread_din_V_data_V_1_vld_out() {
    din_V_data_V_1_vld_out = din_V_data_V_1_state.read()[0];
}

void llr::thread_din_V_tlast_1_ack_in() {
    din_V_tlast_1_ack_in = din_V_tlast_1_state.read()[1];
}

void llr::thread_din_V_tlast_1_ack_out() {
    din_V_tlast_1_ack_out = din_TREADY.read();
}

void llr::thread_din_V_tlast_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, din_V_tlast_1_sel.read())) {
        din_V_tlast_1_data_out = din_V_tlast_1_payload_B.read();
    } else {
        din_V_tlast_1_data_out = din_V_tlast_1_payload_A.read();
    }
}

void llr::thread_din_V_tlast_1_load_A() {
    din_V_tlast_1_load_A = (din_V_tlast_1_state_cmp_full.read() & ~din_V_tlast_1_sel_wr.read());
}

void llr::thread_din_V_tlast_1_load_B() {
    din_V_tlast_1_load_B = (din_V_tlast_1_sel_wr.read() & din_V_tlast_1_state_cmp_full.read());
}

void llr::thread_din_V_tlast_1_sel() {
    din_V_tlast_1_sel = din_V_tlast_1_sel_rd.read();
}

void llr::thread_din_V_tlast_1_state_cmp_full() {
    din_V_tlast_1_state_cmp_full =  (sc_logic) ((!din_V_tlast_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(din_V_tlast_1_state.read() != ap_const_lv2_1))[0];
}

void llr::thread_din_V_tlast_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_135_p2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, control_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, din_words_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dout_words_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, din_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, din_V_tlast_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, din_words_V_tlast_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dout_words_V_tlast_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())))) {
        din_V_tlast_1_vld_in = ap_const_logic_1;
    } else {
        din_V_tlast_1_vld_in = ap_const_logic_0;
    }
}

void llr::thread_din_V_tlast_1_vld_out() {
    din_V_tlast_1_vld_out = din_V_tlast_1_state.read()[0];
}

void llr::thread_din_words_TDATA() {
    din_words_TDATA = din_words_V_data_V_1_data_out.read();
}

void llr::thread_din_words_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        din_words_TDATA_blk_n = din_words_V_data_V_1_state.read()[1];
    } else {
        din_words_TDATA_blk_n = ap_const_logic_1;
    }
}

void llr::thread_din_words_TLAST() {
    din_words_TLAST = din_words_V_tlast_1_data_out.read();
}

void llr::thread_din_words_TVALID() {
    din_words_TVALID = din_words_V_tlast_1_state.read()[0];
}

void llr::thread_din_words_V_data_V_1_ack_in() {
    din_words_V_data_V_1_ack_in = din_words_V_data_V_1_state.read()[1];
}

void llr::thread_din_words_V_data_V_1_ack_out() {
    din_words_V_data_V_1_ack_out = din_words_TREADY.read();
}

void llr::thread_din_words_V_data_V_1_data_out() {
    din_words_V_data_V_1_data_out = ap_const_lv8_10;
}

void llr::thread_din_words_V_data_V_1_sel() {
    din_words_V_data_V_1_sel = din_words_V_data_V_1_sel_rd.read();
}

void llr::thread_din_words_V_data_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dt_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read())))) {
        din_words_V_data_V_1_vld_in = ap_const_logic_1;
    } else {
        din_words_V_data_V_1_vld_in = ap_const_logic_0;
    }
}

void llr::thread_din_words_V_data_V_1_vld_out() {
    din_words_V_data_V_1_vld_out = din_words_V_data_V_1_state.read()[0];
}

void llr::thread_din_words_V_tlast_1_ack_in() {
    din_words_V_tlast_1_ack_in = din_words_V_tlast_1_state.read()[1];
}

void llr::thread_din_words_V_tlast_1_ack_out() {
    din_words_V_tlast_1_ack_out = din_words_TREADY.read();
}

void llr::thread_din_words_V_tlast_1_data_out() {
    din_words_V_tlast_1_data_out =  (sc_logic) (ap_const_lv1_1[0]);
}

void llr::thread_din_words_V_tlast_1_sel() {
    din_words_V_tlast_1_sel = din_words_V_tlast_1_sel_rd.read();
}

void llr::thread_din_words_V_tlast_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dt_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read())))) {
        din_words_V_tlast_1_vld_in = ap_const_logic_1;
    } else {
        din_words_V_tlast_1_vld_in = ap_const_logic_0;
    }
}

void llr::thread_din_words_V_tlast_1_vld_out() {
    din_words_V_tlast_1_vld_out = din_words_V_tlast_1_state.read()[0];
}

void llr::thread_dout_words_TDATA() {
    dout_words_TDATA = dout_words_V_data_V_1_data_out.read();
}

void llr::thread_dout_words_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        dout_words_TDATA_blk_n = dout_words_V_data_V_1_state.read()[1];
    } else {
        dout_words_TDATA_blk_n = ap_const_logic_1;
    }
}

void llr::thread_dout_words_TLAST() {
    dout_words_TLAST = dout_words_V_tlast_1_data_out.read();
}

void llr::thread_dout_words_TVALID() {
    dout_words_TVALID = dout_words_V_tlast_1_state.read()[0];
}

void llr::thread_dout_words_V_data_V_1_ack_in() {
    dout_words_V_data_V_1_ack_in = dout_words_V_data_V_1_state.read()[1];
}

void llr::thread_dout_words_V_data_V_1_ack_out() {
    dout_words_V_data_V_1_ack_out = dout_words_TREADY.read();
}

void llr::thread_dout_words_V_data_V_1_data_out() {
    dout_words_V_data_V_1_data_out = ap_const_lv8_5;
}

void llr::thread_dout_words_V_data_V_1_sel() {
    dout_words_V_data_V_1_sel = dout_words_V_data_V_1_sel_rd.read();
}

void llr::thread_dout_words_V_data_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dt_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read())))) {
        dout_words_V_data_V_1_vld_in = ap_const_logic_1;
    } else {
        dout_words_V_data_V_1_vld_in = ap_const_logic_0;
    }
}

void llr::thread_dout_words_V_data_V_1_vld_out() {
    dout_words_V_data_V_1_vld_out = dout_words_V_data_V_1_state.read()[0];
}

void llr::thread_dout_words_V_tlast_1_ack_in() {
    dout_words_V_tlast_1_ack_in = dout_words_V_tlast_1_state.read()[1];
}

void llr::thread_dout_words_V_tlast_1_ack_out() {
    dout_words_V_tlast_1_ack_out = dout_words_TREADY.read();
}

void llr::thread_dout_words_V_tlast_1_data_out() {
    dout_words_V_tlast_1_data_out =  (sc_logic) (ap_const_lv1_1[0]);
}

void llr::thread_dout_words_V_tlast_1_sel() {
    dout_words_V_tlast_1_sel = dout_words_V_tlast_1_sel_rd.read();
}

void llr::thread_dout_words_V_tlast_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dt_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read())))) {
        dout_words_V_tlast_1_vld_in = ap_const_logic_1;
    } else {
        dout_words_V_tlast_1_vld_in = ap_const_logic_0;
    }
}

void llr::thread_dout_words_V_tlast_1_vld_out() {
    dout_words_V_tlast_1_vld_out = dout_words_V_tlast_1_state.read()[0];
}

void llr::thread_dt_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        dt_TDATA_blk_n = dt_V_data_V_0_state.read()[0];
    } else {
        dt_TDATA_blk_n = ap_const_logic_1;
    }
}

void llr::thread_dt_TREADY() {
    dt_TREADY = dt_V_tlast_0_state.read()[1];
}

void llr::thread_dt_V_data_V_0_ack_in() {
    dt_V_data_V_0_ack_in = dt_V_data_V_0_state.read()[1];
}

void llr::thread_dt_V_data_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dt_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read())))) {
        dt_V_data_V_0_ack_out = ap_const_logic_1;
    } else {
        dt_V_data_V_0_ack_out = ap_const_logic_0;
    }
}

void llr::thread_dt_V_data_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, dt_V_data_V_0_sel.read())) {
        dt_V_data_V_0_data_out = dt_V_data_V_0_payload_B.read();
    } else {
        dt_V_data_V_0_data_out = dt_V_data_V_0_payload_A.read();
    }
}

void llr::thread_dt_V_data_V_0_load_A() {
    dt_V_data_V_0_load_A = (dt_V_data_V_0_state_cmp_full.read() & ~dt_V_data_V_0_sel_wr.read());
}

void llr::thread_dt_V_data_V_0_load_B() {
    dt_V_data_V_0_load_B = (dt_V_data_V_0_sel_wr.read() & dt_V_data_V_0_state_cmp_full.read());
}

void llr::thread_dt_V_data_V_0_sel() {
    dt_V_data_V_0_sel = dt_V_data_V_0_sel_rd.read();
}

void llr::thread_dt_V_data_V_0_state_cmp_full() {
    dt_V_data_V_0_state_cmp_full =  (sc_logic) ((!dt_V_data_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(dt_V_data_V_0_state.read() != ap_const_lv2_1))[0];
}

void llr::thread_dt_V_data_V_0_vld_in() {
    dt_V_data_V_0_vld_in = dt_TVALID.read();
}

void llr::thread_dt_V_data_V_0_vld_out() {
    dt_V_data_V_0_vld_out = dt_V_data_V_0_state.read()[0];
}

void llr::thread_dt_V_tlast_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dt_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read())))) {
        dt_V_tlast_0_ack_out = ap_const_logic_1;
    } else {
        dt_V_tlast_0_ack_out = ap_const_logic_0;
    }
}

void llr::thread_dt_V_tlast_0_vld_in() {
    dt_V_tlast_0_vld_in = dt_TVALID.read();
}

void llr::thread_temp_data_V_1_fu_151_p1() {
    temp_data_V_1_fu_151_p1 = esl_sext<128,127>(tmp_2_fu_141_p4.read());
}

void llr::thread_tmp_1_fu_131_p1() {
    tmp_1_fu_131_p1 = lhs_V_reg_114.read().range(1-1, 0);
}

void llr::thread_tmp_2_fu_141_p4() {
    tmp_2_fu_141_p4 = lhs_V_reg_114.read().range(127, 1);
}

void llr::thread_tmp_5_fu_135_p2() {
    tmp_5_fu_135_p2 = (!tmp_fu_127_p1.read().is_01() || !ap_const_lv64_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_fu_127_p1.read() == ap_const_lv64_0);
}

void llr::thread_tmp_data_V_4_cast_fu_162_p3() {
    tmp_data_V_4_cast_fu_162_p3 = (!tmp_1_fu_131_p1.read()[0].is_01())? sc_lv<128>(): ((tmp_1_fu_131_p1.read()[0].to_bool())? ap_const_lv128_lc_1: ap_const_lv128_lc_2);
}

void llr::thread_tmp_fu_127_p1() {
    tmp_fu_127_p1 = lhs_V_reg_114.read().range(64-1, 0);
}

void llr::thread_tmp_tlast_fu_155_p2() {
    tmp_tlast_fu_155_p2 = (!tmp_2_fu_141_p4.read().is_01() || !ap_const_lv127_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_2_fu_141_p4.read() == ap_const_lv127_0);
}

void llr::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dt_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_block_state2_io.read(), ap_const_boolean_0))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, control_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, din_words_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dout_words_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, din_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, din_V_tlast_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, din_words_V_tlast_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dout_words_V_tlast_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) && esl_seteq<1,1,1>(ap_const_logic_0, din_V_data_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, din_V_tlast_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, control_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, din_words_V_data_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, din_words_V_tlast_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, dout_words_V_data_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, dout_words_V_tlast_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_5_fu_135_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_135_p2.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, control_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, din_words_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dout_words_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, din_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, din_V_tlast_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, din_words_V_tlast_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dout_words_V_tlast_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(din_V_data_V_1_ack_in.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

void llr::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"dt_TDATA\" :  \"" << dt_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"dt_TVALID\" :  \"" << dt_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dt_TREADY\" :  \"" << dt_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"dt_TLAST\" :  \"" << dt_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"din_TDATA\" :  \"" << din_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"din_TVALID\" :  \"" << din_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"din_TREADY\" :  \"" << din_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"din_TLAST\" :  \"" << din_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"control_V_TDATA\" :  \"" << control_V_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"control_V_TVALID\" :  \"" << control_V_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"control_V_TREADY\" :  \"" << control_V_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"din_words_TDATA\" :  \"" << din_words_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"din_words_TVALID\" :  \"" << din_words_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"din_words_TREADY\" :  \"" << din_words_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"din_words_TLAST\" :  \"" << din_words_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dout_words_TDATA\" :  \"" << dout_words_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dout_words_TVALID\" :  \"" << dout_words_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"dout_words_TREADY\" :  \"" << dout_words_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dout_words_TLAST\" :  \"" << dout_words_TLAST.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

