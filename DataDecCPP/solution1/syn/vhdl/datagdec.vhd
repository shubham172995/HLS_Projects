-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity datagdec is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    din_TDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
    din_TVALID : OUT STD_LOGIC;
    din_TREADY : IN STD_LOGIC;
    din_TLAST : OUT STD_LOGIC;
    control_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    control_V_TVALID : OUT STD_LOGIC;
    control_V_TREADY : IN STD_LOGIC;
    din_words_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    din_words_TVALID : OUT STD_LOGIC;
    din_words_TREADY : IN STD_LOGIC;
    din_words_TLAST : OUT STD_LOGIC;
    dout_words_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    dout_words_TVALID : OUT STD_LOGIC;
    dout_words_TREADY : IN STD_LOGIC;
    dout_words_TLAST : OUT STD_LOGIC );
end;


architecture behav of datagdec is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "datagdec,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvb1156-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.416000,HLS_SYN_LAT=26,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=296,HLS_SYN_LUT=264,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv8_10 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv128_lc_2 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal din_V_data_V_1_data_out : STD_LOGIC_VECTOR (127 downto 0);
    signal din_V_data_V_1_vld_in : STD_LOGIC;
    signal din_V_data_V_1_vld_out : STD_LOGIC;
    signal din_V_data_V_1_ack_in : STD_LOGIC;
    signal din_V_data_V_1_ack_out : STD_LOGIC;
    signal din_V_data_V_1_payload_A : STD_LOGIC_VECTOR (127 downto 0);
    signal din_V_data_V_1_payload_B : STD_LOGIC_VECTOR (127 downto 0);
    signal din_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal din_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal din_V_data_V_1_sel : STD_LOGIC;
    signal din_V_data_V_1_load_A : STD_LOGIC;
    signal din_V_data_V_1_load_B : STD_LOGIC;
    signal din_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal din_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal din_V_tlast_1_data_out : STD_LOGIC;
    signal din_V_tlast_1_vld_in : STD_LOGIC;
    signal din_V_tlast_1_vld_out : STD_LOGIC;
    signal din_V_tlast_1_ack_in : STD_LOGIC;
    signal din_V_tlast_1_ack_out : STD_LOGIC;
    signal din_V_tlast_1_payload_A : STD_LOGIC;
    signal din_V_tlast_1_payload_B : STD_LOGIC;
    signal din_V_tlast_1_sel_rd : STD_LOGIC := '0';
    signal din_V_tlast_1_sel_wr : STD_LOGIC := '0';
    signal din_V_tlast_1_sel : STD_LOGIC;
    signal din_V_tlast_1_load_A : STD_LOGIC;
    signal din_V_tlast_1_load_B : STD_LOGIC;
    signal din_V_tlast_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal din_V_tlast_1_state_cmp_full : STD_LOGIC;
    signal control_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal control_V_1_vld_in : STD_LOGIC;
    signal control_V_1_vld_out : STD_LOGIC;
    signal control_V_1_ack_in : STD_LOGIC;
    signal control_V_1_ack_out : STD_LOGIC;
    signal control_V_1_sel_rd : STD_LOGIC := '0';
    signal control_V_1_sel : STD_LOGIC;
    signal control_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal din_words_V_data_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal din_words_V_data_V_1_vld_in : STD_LOGIC;
    signal din_words_V_data_V_1_vld_out : STD_LOGIC;
    signal din_words_V_data_V_1_ack_in : STD_LOGIC;
    signal din_words_V_data_V_1_ack_out : STD_LOGIC;
    signal din_words_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal din_words_V_data_V_1_sel : STD_LOGIC;
    signal din_words_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal din_words_V_tlast_1_data_out : STD_LOGIC;
    signal din_words_V_tlast_1_vld_in : STD_LOGIC;
    signal din_words_V_tlast_1_vld_out : STD_LOGIC;
    signal din_words_V_tlast_1_ack_in : STD_LOGIC;
    signal din_words_V_tlast_1_ack_out : STD_LOGIC;
    signal din_words_V_tlast_1_sel_rd : STD_LOGIC := '0';
    signal din_words_V_tlast_1_sel : STD_LOGIC;
    signal din_words_V_tlast_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal dout_words_V_data_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal dout_words_V_data_V_1_vld_in : STD_LOGIC;
    signal dout_words_V_data_V_1_vld_out : STD_LOGIC;
    signal dout_words_V_data_V_1_ack_in : STD_LOGIC;
    signal dout_words_V_data_V_1_ack_out : STD_LOGIC;
    signal dout_words_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal dout_words_V_data_V_1_sel : STD_LOGIC;
    signal dout_words_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal dout_words_V_tlast_1_data_out : STD_LOGIC;
    signal dout_words_V_tlast_1_vld_in : STD_LOGIC;
    signal dout_words_V_tlast_1_vld_out : STD_LOGIC;
    signal dout_words_V_tlast_1_ack_in : STD_LOGIC;
    signal dout_words_V_tlast_1_ack_out : STD_LOGIC;
    signal dout_words_V_tlast_1_sel_rd : STD_LOGIC := '0';
    signal dout_words_V_tlast_1_sel : STD_LOGIC;
    signal dout_words_V_tlast_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal t_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal t_ce0 : STD_LOGIC;
    signal t_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal din_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal control_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal din_words_TDATA_blk_n : STD_LOGIC;
    signal dout_words_TDATA_blk_n : STD_LOGIC;
    signal i_fu_134_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_163 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_block_state3 : BOOLEAN;
    signal tmp_tlast_fu_140_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_tlast_reg_168 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_fu_128_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal dat_data_V_fu_151_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal i2_reg_117 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state2_io : BOOLEAN;
    signal tmp_3_fu_146_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1_io : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);

    component datagdec_t IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    t_U : component datagdec_t
    generic map (
        DataWidth => 1,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => t_address0,
        ce0 => t_ce0,
        q0 => t_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    control_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                control_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((control_V_1_ack_out = ap_const_logic_1) and (control_V_1_vld_out = ap_const_logic_1))) then 
                                        control_V_1_sel_rd <= not(control_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    control_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                control_V_1_state <= ap_const_lv2_0;
            else
                if ((((control_V_1_state = ap_const_lv2_2) and (control_V_1_vld_in = ap_const_logic_0)) or ((control_V_1_state = ap_const_lv2_3) and (control_V_1_vld_in = ap_const_logic_0) and (control_V_1_ack_out = ap_const_logic_1)))) then 
                    control_V_1_state <= ap_const_lv2_2;
                elsif ((((control_V_1_state = ap_const_lv2_1) and (control_V_1_ack_out = ap_const_logic_0)) or ((control_V_1_state = ap_const_lv2_3) and (control_V_1_ack_out = ap_const_logic_0) and (control_V_1_vld_in = ap_const_logic_1)))) then 
                    control_V_1_state <= ap_const_lv2_1;
                elsif (((not(((control_V_1_vld_in = ap_const_logic_0) and (control_V_1_ack_out = ap_const_logic_1))) and not(((control_V_1_ack_out = ap_const_logic_0) and (control_V_1_vld_in = ap_const_logic_1))) and (control_V_1_state = ap_const_lv2_3)) or ((control_V_1_state = ap_const_lv2_1) and (control_V_1_ack_out = ap_const_logic_1)) or ((control_V_1_state = ap_const_lv2_2) and (control_V_1_vld_in = ap_const_logic_1)))) then 
                    control_V_1_state <= ap_const_lv2_3;
                else 
                    control_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    din_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                din_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((din_V_data_V_1_ack_out = ap_const_logic_1) and (din_V_data_V_1_vld_out = ap_const_logic_1))) then 
                                        din_V_data_V_1_sel_rd <= not(din_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    din_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                din_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((din_V_data_V_1_ack_in = ap_const_logic_1) and (din_V_data_V_1_vld_in = ap_const_logic_1))) then 
                                        din_V_data_V_1_sel_wr <= not(din_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    din_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                din_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((din_V_data_V_1_state = ap_const_lv2_2) and (din_V_data_V_1_vld_in = ap_const_logic_0)) or ((din_V_data_V_1_state = ap_const_lv2_3) and (din_V_data_V_1_vld_in = ap_const_logic_0) and (din_V_data_V_1_ack_out = ap_const_logic_1)))) then 
                    din_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((din_V_data_V_1_state = ap_const_lv2_1) and (din_V_data_V_1_ack_out = ap_const_logic_0)) or ((din_V_data_V_1_state = ap_const_lv2_3) and (din_V_data_V_1_ack_out = ap_const_logic_0) and (din_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    din_V_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((din_V_data_V_1_vld_in = ap_const_logic_0) and (din_V_data_V_1_ack_out = ap_const_logic_1))) and not(((din_V_data_V_1_ack_out = ap_const_logic_0) and (din_V_data_V_1_vld_in = ap_const_logic_1))) and (din_V_data_V_1_state = ap_const_lv2_3)) or ((din_V_data_V_1_state = ap_const_lv2_1) and (din_V_data_V_1_ack_out = ap_const_logic_1)) or ((din_V_data_V_1_state = ap_const_lv2_2) and (din_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    din_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    din_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    din_V_tlast_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                din_V_tlast_1_sel_rd <= ap_const_logic_0;
            else
                if (((din_V_tlast_1_vld_out = ap_const_logic_1) and (din_V_tlast_1_ack_out = ap_const_logic_1))) then 
                                        din_V_tlast_1_sel_rd <= not(din_V_tlast_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    din_V_tlast_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                din_V_tlast_1_sel_wr <= ap_const_logic_0;
            else
                if (((din_V_tlast_1_vld_in = ap_const_logic_1) and (din_V_tlast_1_ack_in = ap_const_logic_1))) then 
                                        din_V_tlast_1_sel_wr <= not(din_V_tlast_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    din_V_tlast_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                din_V_tlast_1_state <= ap_const_lv2_0;
            else
                if ((((din_V_tlast_1_state = ap_const_lv2_2) and (din_V_tlast_1_vld_in = ap_const_logic_0)) or ((din_V_tlast_1_state = ap_const_lv2_3) and (din_V_tlast_1_vld_in = ap_const_logic_0) and (din_V_tlast_1_ack_out = ap_const_logic_1)))) then 
                    din_V_tlast_1_state <= ap_const_lv2_2;
                elsif ((((din_V_tlast_1_state = ap_const_lv2_1) and (din_V_tlast_1_ack_out = ap_const_logic_0)) or ((din_V_tlast_1_state = ap_const_lv2_3) and (din_V_tlast_1_ack_out = ap_const_logic_0) and (din_V_tlast_1_vld_in = ap_const_logic_1)))) then 
                    din_V_tlast_1_state <= ap_const_lv2_1;
                elsif (((not(((din_V_tlast_1_vld_in = ap_const_logic_0) and (din_V_tlast_1_ack_out = ap_const_logic_1))) and not(((din_V_tlast_1_ack_out = ap_const_logic_0) and (din_V_tlast_1_vld_in = ap_const_logic_1))) and (din_V_tlast_1_state = ap_const_lv2_3)) or ((din_V_tlast_1_state = ap_const_lv2_1) and (din_V_tlast_1_ack_out = ap_const_logic_1)) or ((din_V_tlast_1_state = ap_const_lv2_2) and (din_V_tlast_1_vld_in = ap_const_logic_1)))) then 
                    din_V_tlast_1_state <= ap_const_lv2_3;
                else 
                    din_V_tlast_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    din_words_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                din_words_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((din_words_V_data_V_1_ack_out = ap_const_logic_1) and (din_words_V_data_V_1_vld_out = ap_const_logic_1))) then 
                                        din_words_V_data_V_1_sel_rd <= not(din_words_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    din_words_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                din_words_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((din_words_V_data_V_1_state = ap_const_lv2_2) and (din_words_V_data_V_1_vld_in = ap_const_logic_0)) or ((din_words_V_data_V_1_state = ap_const_lv2_3) and (din_words_V_data_V_1_vld_in = ap_const_logic_0) and (din_words_V_data_V_1_ack_out = ap_const_logic_1)))) then 
                    din_words_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((din_words_V_data_V_1_state = ap_const_lv2_1) and (din_words_V_data_V_1_ack_out = ap_const_logic_0)) or ((din_words_V_data_V_1_state = ap_const_lv2_3) and (din_words_V_data_V_1_ack_out = ap_const_logic_0) and (din_words_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    din_words_V_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((din_words_V_data_V_1_vld_in = ap_const_logic_0) and (din_words_V_data_V_1_ack_out = ap_const_logic_1))) and not(((din_words_V_data_V_1_ack_out = ap_const_logic_0) and (din_words_V_data_V_1_vld_in = ap_const_logic_1))) and (din_words_V_data_V_1_state = ap_const_lv2_3)) or ((din_words_V_data_V_1_state = ap_const_lv2_1) and (din_words_V_data_V_1_ack_out = ap_const_logic_1)) or ((din_words_V_data_V_1_state = ap_const_lv2_2) and (din_words_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    din_words_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    din_words_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    din_words_V_tlast_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                din_words_V_tlast_1_sel_rd <= ap_const_logic_0;
            else
                if (((din_words_V_tlast_1_ack_out = ap_const_logic_1) and (din_words_V_tlast_1_vld_out = ap_const_logic_1))) then 
                                        din_words_V_tlast_1_sel_rd <= not(din_words_V_tlast_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    din_words_V_tlast_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                din_words_V_tlast_1_state <= ap_const_lv2_0;
            else
                if ((((din_words_V_tlast_1_state = ap_const_lv2_2) and (din_words_V_tlast_1_vld_in = ap_const_logic_0)) or ((din_words_V_tlast_1_state = ap_const_lv2_3) and (din_words_V_tlast_1_vld_in = ap_const_logic_0) and (din_words_V_tlast_1_ack_out = ap_const_logic_1)))) then 
                    din_words_V_tlast_1_state <= ap_const_lv2_2;
                elsif ((((din_words_V_tlast_1_state = ap_const_lv2_1) and (din_words_V_tlast_1_ack_out = ap_const_logic_0)) or ((din_words_V_tlast_1_state = ap_const_lv2_3) and (din_words_V_tlast_1_ack_out = ap_const_logic_0) and (din_words_V_tlast_1_vld_in = ap_const_logic_1)))) then 
                    din_words_V_tlast_1_state <= ap_const_lv2_1;
                elsif (((not(((din_words_V_tlast_1_vld_in = ap_const_logic_0) and (din_words_V_tlast_1_ack_out = ap_const_logic_1))) and not(((din_words_V_tlast_1_ack_out = ap_const_logic_0) and (din_words_V_tlast_1_vld_in = ap_const_logic_1))) and (din_words_V_tlast_1_state = ap_const_lv2_3)) or ((din_words_V_tlast_1_state = ap_const_lv2_1) and (din_words_V_tlast_1_ack_out = ap_const_logic_1)) or ((din_words_V_tlast_1_state = ap_const_lv2_2) and (din_words_V_tlast_1_vld_in = ap_const_logic_1)))) then 
                    din_words_V_tlast_1_state <= ap_const_lv2_3;
                else 
                    din_words_V_tlast_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    dout_words_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dout_words_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((dout_words_V_data_V_1_ack_out = ap_const_logic_1) and (dout_words_V_data_V_1_vld_out = ap_const_logic_1))) then 
                                        dout_words_V_data_V_1_sel_rd <= not(dout_words_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    dout_words_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dout_words_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((dout_words_V_data_V_1_state = ap_const_lv2_2) and (dout_words_V_data_V_1_vld_in = ap_const_logic_0)) or ((dout_words_V_data_V_1_state = ap_const_lv2_3) and (dout_words_V_data_V_1_vld_in = ap_const_logic_0) and (dout_words_V_data_V_1_ack_out = ap_const_logic_1)))) then 
                    dout_words_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((dout_words_V_data_V_1_state = ap_const_lv2_1) and (dout_words_V_data_V_1_ack_out = ap_const_logic_0)) or ((dout_words_V_data_V_1_state = ap_const_lv2_3) and (dout_words_V_data_V_1_ack_out = ap_const_logic_0) and (dout_words_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    dout_words_V_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((dout_words_V_data_V_1_vld_in = ap_const_logic_0) and (dout_words_V_data_V_1_ack_out = ap_const_logic_1))) and not(((dout_words_V_data_V_1_ack_out = ap_const_logic_0) and (dout_words_V_data_V_1_vld_in = ap_const_logic_1))) and (dout_words_V_data_V_1_state = ap_const_lv2_3)) or ((dout_words_V_data_V_1_state = ap_const_lv2_1) and (dout_words_V_data_V_1_ack_out = ap_const_logic_1)) or ((dout_words_V_data_V_1_state = ap_const_lv2_2) and (dout_words_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    dout_words_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    dout_words_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    dout_words_V_tlast_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dout_words_V_tlast_1_sel_rd <= ap_const_logic_0;
            else
                if (((dout_words_V_tlast_1_ack_out = ap_const_logic_1) and (dout_words_V_tlast_1_vld_out = ap_const_logic_1))) then 
                                        dout_words_V_tlast_1_sel_rd <= not(dout_words_V_tlast_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    dout_words_V_tlast_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dout_words_V_tlast_1_state <= ap_const_lv2_0;
            else
                if ((((dout_words_V_tlast_1_state = ap_const_lv2_2) and (dout_words_V_tlast_1_vld_in = ap_const_logic_0)) or ((dout_words_V_tlast_1_state = ap_const_lv2_3) and (dout_words_V_tlast_1_vld_in = ap_const_logic_0) and (dout_words_V_tlast_1_ack_out = ap_const_logic_1)))) then 
                    dout_words_V_tlast_1_state <= ap_const_lv2_2;
                elsif ((((dout_words_V_tlast_1_state = ap_const_lv2_1) and (dout_words_V_tlast_1_ack_out = ap_const_logic_0)) or ((dout_words_V_tlast_1_state = ap_const_lv2_3) and (dout_words_V_tlast_1_ack_out = ap_const_logic_0) and (dout_words_V_tlast_1_vld_in = ap_const_logic_1)))) then 
                    dout_words_V_tlast_1_state <= ap_const_lv2_1;
                elsif (((not(((dout_words_V_tlast_1_vld_in = ap_const_logic_0) and (dout_words_V_tlast_1_ack_out = ap_const_logic_1))) and not(((dout_words_V_tlast_1_ack_out = ap_const_logic_0) and (dout_words_V_tlast_1_vld_in = ap_const_logic_1))) and (dout_words_V_tlast_1_state = ap_const_lv2_3)) or ((dout_words_V_tlast_1_state = ap_const_lv2_1) and (dout_words_V_tlast_1_ack_out = ap_const_logic_1)) or ((dout_words_V_tlast_1_state = ap_const_lv2_2) and (dout_words_V_tlast_1_vld_in = ap_const_logic_1)))) then 
                    dout_words_V_tlast_1_state <= ap_const_lv2_3;
                else 
                    dout_words_V_tlast_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    i2_reg_117_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((din_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i2_reg_117 <= i_reg_163;
            elsif (((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i2_reg_117 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((din_V_data_V_1_load_A = ap_const_logic_1)) then
                din_V_data_V_1_payload_A <= dat_data_V_fu_151_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((din_V_data_V_1_load_B = ap_const_logic_1)) then
                din_V_data_V_1_payload_B <= dat_data_V_fu_151_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((din_V_tlast_1_load_A = ap_const_logic_1)) then
                din_V_tlast_1_payload_A <= tmp_tlast_reg_168(0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((din_V_tlast_1_load_B = ap_const_logic_1)) then
                din_V_tlast_1_payload_B <= tmp_tlast_reg_168(0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((dout_words_V_tlast_1_ack_in = ap_const_logic_0) or (din_V_data_V_1_ack_in = ap_const_logic_0) or (dout_words_V_data_V_1_ack_in = ap_const_logic_0) or (din_words_V_tlast_1_ack_in = ap_const_logic_0) or (din_words_V_data_V_1_ack_in = ap_const_logic_0) or (control_V_1_ack_in = ap_const_logic_0) or (din_V_tlast_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                i_reg_163 <= i_fu_134_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((dout_words_V_tlast_1_ack_in = ap_const_logic_0) or (din_V_data_V_1_ack_in = ap_const_logic_0) or (dout_words_V_data_V_1_ack_in = ap_const_logic_0) or (din_words_V_tlast_1_ack_in = ap_const_logic_0) or (din_words_V_data_V_1_ack_in = ap_const_logic_0) or (control_V_1_ack_in = ap_const_logic_0) or (din_V_tlast_1_ack_in = ap_const_logic_0))) and (exitcond_fu_128_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_tlast_reg_168 <= tmp_tlast_fu_140_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, din_V_data_V_1_ack_in, din_V_data_V_1_state, din_V_tlast_1_ack_in, din_V_tlast_1_state, control_V_1_ack_in, control_V_1_state, din_words_V_data_V_1_ack_in, din_words_V_data_V_1_state, din_words_V_tlast_1_ack_in, din_words_V_tlast_1_state, dout_words_V_data_V_1_ack_in, dout_words_V_data_V_1_state, dout_words_V_tlast_1_ack_in, dout_words_V_tlast_1_state, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state2, ap_CS_fsm_state3, exitcond_fu_128_p2, ap_block_state2_io, ap_block_state1_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1_io))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not(((dout_words_V_tlast_1_ack_in = ap_const_logic_0) or (din_V_data_V_1_ack_in = ap_const_logic_0) or (dout_words_V_data_V_1_ack_in = ap_const_logic_0) or (din_words_V_tlast_1_ack_in = ap_const_logic_0) or (din_words_V_data_V_1_ack_in = ap_const_logic_0) or (control_V_1_ack_in = ap_const_logic_0) or (din_V_tlast_1_ack_in = ap_const_logic_0))) and (exitcond_fu_128_p2 = ap_const_lv1_1) and (din_V_data_V_1_state(0) = ap_const_logic_0) and (dout_words_V_tlast_1_state(0) = ap_const_logic_0) and (dout_words_V_data_V_1_state(0) = ap_const_logic_0) and (din_words_V_tlast_1_state(0) = ap_const_logic_0) and (din_words_V_data_V_1_state(0) = ap_const_logic_0) and (control_V_1_state(0) = ap_const_logic_0) and (din_V_tlast_1_state(0) = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((dout_words_V_tlast_1_ack_in = ap_const_logic_0) or (din_V_data_V_1_ack_in = ap_const_logic_0) or (dout_words_V_data_V_1_ack_in = ap_const_logic_0) or (din_words_V_tlast_1_ack_in = ap_const_logic_0) or (din_words_V_data_V_1_ack_in = ap_const_logic_0) or (control_V_1_ack_in = ap_const_logic_0) or (din_V_tlast_1_ack_in = ap_const_logic_0))) and (exitcond_fu_128_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((din_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((din_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_block_state1_io_assign_proc : process(control_V_1_ack_in, din_words_V_data_V_1_ack_in, dout_words_V_data_V_1_ack_in)
    begin
                ap_block_state1_io <= ((dout_words_V_data_V_1_ack_in = ap_const_logic_0) or (din_words_V_data_V_1_ack_in = ap_const_logic_0) or (control_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_block_state2_io_assign_proc : process(control_V_1_ack_in, din_words_V_data_V_1_ack_in, dout_words_V_data_V_1_ack_in)
    begin
                ap_block_state2_io <= ((dout_words_V_data_V_1_ack_in = ap_const_logic_0) or (din_words_V_data_V_1_ack_in = ap_const_logic_0) or (control_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_block_state3_assign_proc : process(din_V_data_V_1_ack_in, din_V_tlast_1_ack_in, control_V_1_ack_in, din_words_V_data_V_1_ack_in, din_words_V_tlast_1_ack_in, dout_words_V_data_V_1_ack_in, dout_words_V_tlast_1_ack_in)
    begin
                ap_block_state3 <= ((dout_words_V_tlast_1_ack_in = ap_const_logic_0) or (din_V_data_V_1_ack_in = ap_const_logic_0) or (dout_words_V_data_V_1_ack_in = ap_const_logic_0) or (din_words_V_tlast_1_ack_in = ap_const_logic_0) or (din_words_V_data_V_1_ack_in = ap_const_logic_0) or (control_V_1_ack_in = ap_const_logic_0) or (din_V_tlast_1_ack_in = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(din_V_data_V_1_ack_in, din_V_data_V_1_state, din_V_tlast_1_ack_in, din_V_tlast_1_state, control_V_1_ack_in, control_V_1_state, din_words_V_data_V_1_ack_in, din_words_V_data_V_1_state, din_words_V_tlast_1_ack_in, din_words_V_tlast_1_state, dout_words_V_data_V_1_ack_in, dout_words_V_data_V_1_state, dout_words_V_tlast_1_ack_in, dout_words_V_tlast_1_state, ap_CS_fsm_state3, exitcond_fu_128_p2)
    begin
        if ((not(((dout_words_V_tlast_1_ack_in = ap_const_logic_0) or (din_V_data_V_1_ack_in = ap_const_logic_0) or (dout_words_V_data_V_1_ack_in = ap_const_logic_0) or (din_words_V_tlast_1_ack_in = ap_const_logic_0) or (din_words_V_data_V_1_ack_in = ap_const_logic_0) or (control_V_1_ack_in = ap_const_logic_0) or (din_V_tlast_1_ack_in = ap_const_logic_0))) and (exitcond_fu_128_p2 = ap_const_lv1_1) and (din_V_data_V_1_state(0) = ap_const_logic_0) and (dout_words_V_tlast_1_state(0) = ap_const_logic_0) and (dout_words_V_data_V_1_state(0) = ap_const_logic_0) and (din_words_V_tlast_1_state(0) = ap_const_logic_0) and (din_words_V_data_V_1_state(0) = ap_const_logic_0) and (control_V_1_state(0) = ap_const_logic_0) and (din_V_tlast_1_state(0) = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(din_V_data_V_1_ack_in, din_V_data_V_1_state, din_V_tlast_1_ack_in, din_V_tlast_1_state, control_V_1_ack_in, control_V_1_state, din_words_V_data_V_1_ack_in, din_words_V_data_V_1_state, din_words_V_tlast_1_ack_in, din_words_V_tlast_1_state, dout_words_V_data_V_1_ack_in, dout_words_V_data_V_1_state, dout_words_V_tlast_1_ack_in, dout_words_V_tlast_1_state, ap_CS_fsm_state3, exitcond_fu_128_p2)
    begin
        if ((not(((dout_words_V_tlast_1_ack_in = ap_const_logic_0) or (din_V_data_V_1_ack_in = ap_const_logic_0) or (dout_words_V_data_V_1_ack_in = ap_const_logic_0) or (din_words_V_tlast_1_ack_in = ap_const_logic_0) or (din_words_V_data_V_1_ack_in = ap_const_logic_0) or (control_V_1_ack_in = ap_const_logic_0) or (din_V_tlast_1_ack_in = ap_const_logic_0))) and (exitcond_fu_128_p2 = ap_const_lv1_1) and (din_V_data_V_1_state(0) = ap_const_logic_0) and (dout_words_V_tlast_1_state(0) = ap_const_logic_0) and (dout_words_V_data_V_1_state(0) = ap_const_logic_0) and (din_words_V_tlast_1_state(0) = ap_const_logic_0) and (din_words_V_data_V_1_state(0) = ap_const_logic_0) and (control_V_1_state(0) = ap_const_logic_0) and (din_V_tlast_1_state(0) = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    control_V_1_ack_in <= control_V_1_state(1);
    control_V_1_ack_out <= control_V_TREADY;
    control_V_1_data_out <= ap_const_lv32_0;
    control_V_1_sel <= control_V_1_sel_rd;

    control_V_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_block_state1_io)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1_io))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            control_V_1_vld_in <= ap_const_logic_1;
        else 
            control_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    control_V_1_vld_out <= control_V_1_state(0);
    control_V_TDATA <= control_V_1_data_out;

    control_V_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, control_V_1_state, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            control_V_TDATA_blk_n <= control_V_1_state(1);
        else 
            control_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    control_V_TVALID <= control_V_1_state(0);
    dat_data_V_fu_151_p3 <= 
        ap_const_lv128_lc_1 when (t_q0(0) = '1') else 
        ap_const_lv128_lc_2;
    din_TDATA <= din_V_data_V_1_data_out;

    din_TDATA_blk_n_assign_proc : process(din_V_data_V_1_state, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            din_TDATA_blk_n <= din_V_data_V_1_state(1);
        else 
            din_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    din_TLAST <= din_V_tlast_1_data_out;
    din_TVALID <= din_V_tlast_1_state(0);
    din_V_data_V_1_ack_in <= din_V_data_V_1_state(1);
    din_V_data_V_1_ack_out <= din_TREADY;

    din_V_data_V_1_data_out_assign_proc : process(din_V_data_V_1_payload_A, din_V_data_V_1_payload_B, din_V_data_V_1_sel)
    begin
        if ((din_V_data_V_1_sel = ap_const_logic_1)) then 
            din_V_data_V_1_data_out <= din_V_data_V_1_payload_B;
        else 
            din_V_data_V_1_data_out <= din_V_data_V_1_payload_A;
        end if; 
    end process;

    din_V_data_V_1_load_A <= (not(din_V_data_V_1_sel_wr) and din_V_data_V_1_state_cmp_full);
    din_V_data_V_1_load_B <= (din_V_data_V_1_state_cmp_full and din_V_data_V_1_sel_wr);
    din_V_data_V_1_sel <= din_V_data_V_1_sel_rd;
    din_V_data_V_1_state_cmp_full <= '0' when (din_V_data_V_1_state = ap_const_lv2_1) else '1';

    din_V_data_V_1_vld_in_assign_proc : process(din_V_data_V_1_ack_in, ap_CS_fsm_state4)
    begin
        if (((din_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            din_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            din_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    din_V_data_V_1_vld_out <= din_V_data_V_1_state(0);
    din_V_tlast_1_ack_in <= din_V_tlast_1_state(1);
    din_V_tlast_1_ack_out <= din_TREADY;

    din_V_tlast_1_data_out_assign_proc : process(din_V_tlast_1_payload_A, din_V_tlast_1_payload_B, din_V_tlast_1_sel)
    begin
        if ((din_V_tlast_1_sel = ap_const_logic_1)) then 
            din_V_tlast_1_data_out <= din_V_tlast_1_payload_B;
        else 
            din_V_tlast_1_data_out <= din_V_tlast_1_payload_A;
        end if; 
    end process;

    din_V_tlast_1_load_A <= (not(din_V_tlast_1_sel_wr) and din_V_tlast_1_state_cmp_full);
    din_V_tlast_1_load_B <= (din_V_tlast_1_state_cmp_full and din_V_tlast_1_sel_wr);
    din_V_tlast_1_sel <= din_V_tlast_1_sel_rd;
    din_V_tlast_1_state_cmp_full <= '0' when (din_V_tlast_1_state = ap_const_lv2_1) else '1';

    din_V_tlast_1_vld_in_assign_proc : process(din_V_data_V_1_ack_in, ap_CS_fsm_state4)
    begin
        if (((din_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            din_V_tlast_1_vld_in <= ap_const_logic_1;
        else 
            din_V_tlast_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    din_V_tlast_1_vld_out <= din_V_tlast_1_state(0);
    din_words_TDATA <= din_words_V_data_V_1_data_out;

    din_words_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, din_words_V_data_V_1_state, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            din_words_TDATA_blk_n <= din_words_V_data_V_1_state(1);
        else 
            din_words_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    din_words_TLAST <= din_words_V_tlast_1_data_out;
    din_words_TVALID <= din_words_V_tlast_1_state(0);
    din_words_V_data_V_1_ack_in <= din_words_V_data_V_1_state(1);
    din_words_V_data_V_1_ack_out <= din_words_TREADY;
    din_words_V_data_V_1_data_out <= ap_const_lv8_10;
    din_words_V_data_V_1_sel <= din_words_V_data_V_1_sel_rd;

    din_words_V_data_V_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_block_state1_io)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1_io))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            din_words_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            din_words_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    din_words_V_data_V_1_vld_out <= din_words_V_data_V_1_state(0);
    din_words_V_tlast_1_ack_in <= din_words_V_tlast_1_state(1);
    din_words_V_tlast_1_ack_out <= din_words_TREADY;
    din_words_V_tlast_1_data_out <= ap_const_logic_1;
    din_words_V_tlast_1_sel <= din_words_V_tlast_1_sel_rd;

    din_words_V_tlast_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_block_state1_io)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1_io))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            din_words_V_tlast_1_vld_in <= ap_const_logic_1;
        else 
            din_words_V_tlast_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    din_words_V_tlast_1_vld_out <= din_words_V_tlast_1_state(0);
    dout_words_TDATA <= dout_words_V_data_V_1_data_out;

    dout_words_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, dout_words_V_data_V_1_state, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            dout_words_TDATA_blk_n <= dout_words_V_data_V_1_state(1);
        else 
            dout_words_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dout_words_TLAST <= dout_words_V_tlast_1_data_out;
    dout_words_TVALID <= dout_words_V_tlast_1_state(0);
    dout_words_V_data_V_1_ack_in <= dout_words_V_data_V_1_state(1);
    dout_words_V_data_V_1_ack_out <= dout_words_TREADY;
    dout_words_V_data_V_1_data_out <= ap_const_lv8_10;
    dout_words_V_data_V_1_sel <= dout_words_V_data_V_1_sel_rd;

    dout_words_V_data_V_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_block_state1_io)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1_io))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            dout_words_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            dout_words_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    dout_words_V_data_V_1_vld_out <= dout_words_V_data_V_1_state(0);
    dout_words_V_tlast_1_ack_in <= dout_words_V_tlast_1_state(1);
    dout_words_V_tlast_1_ack_out <= dout_words_TREADY;
    dout_words_V_tlast_1_data_out <= ap_const_logic_1;
    dout_words_V_tlast_1_sel <= dout_words_V_tlast_1_sel_rd;

    dout_words_V_tlast_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_block_state1_io)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1_io))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            dout_words_V_tlast_1_vld_in <= ap_const_logic_1;
        else 
            dout_words_V_tlast_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    dout_words_V_tlast_1_vld_out <= dout_words_V_tlast_1_state(0);
    exitcond_fu_128_p2 <= "1" when (i2_reg_117 = ap_const_lv4_8) else "0";
    i_fu_134_p2 <= std_logic_vector(unsigned(i2_reg_117) + unsigned(ap_const_lv4_1));
    t_address0 <= tmp_3_fu_146_p1(3 - 1 downto 0);

    t_ce0_assign_proc : process(din_V_data_V_1_ack_in, din_V_tlast_1_ack_in, control_V_1_ack_in, din_words_V_data_V_1_ack_in, din_words_V_tlast_1_ack_in, dout_words_V_data_V_1_ack_in, dout_words_V_tlast_1_ack_in, ap_CS_fsm_state3)
    begin
        if ((not(((dout_words_V_tlast_1_ack_in = ap_const_logic_0) or (din_V_data_V_1_ack_in = ap_const_logic_0) or (dout_words_V_data_V_1_ack_in = ap_const_logic_0) or (din_words_V_tlast_1_ack_in = ap_const_logic_0) or (din_words_V_data_V_1_ack_in = ap_const_logic_0) or (control_V_1_ack_in = ap_const_logic_0) or (din_V_tlast_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            t_ce0 <= ap_const_logic_1;
        else 
            t_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_3_fu_146_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i2_reg_117),64));
    tmp_tlast_fu_140_p2 <= "1" when (unsigned(i2_reg_117) > unsigned(ap_const_lv4_6)) else "0";
end behav;
