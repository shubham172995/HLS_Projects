// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="datag,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=0.000000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=23,HLS_SYN_LUT=160,HLS_VERSION=2018_3}" *)

module datag (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        din_TDATA,
        din_TVALID,
        din_TREADY,
        din_TLAST,
        control_V_TDATA,
        control_V_TVALID,
        control_V_TREADY,
        din_words_TDATA,
        din_words_TVALID,
        din_words_TREADY,
        din_words_TLAST,
        dout_words_TDATA,
        dout_words_TVALID,
        dout_words_TREADY,
        dout_words_TLAST
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [127:0] din_TDATA;
output   din_TVALID;
input   din_TREADY;
output   din_TLAST;
output  [31:0] control_V_TDATA;
output   control_V_TVALID;
input   control_V_TREADY;
output  [7:0] din_words_TDATA;
output   din_words_TVALID;
input   din_words_TREADY;
output   din_words_TLAST;
output  [7:0] dout_words_TDATA;
output   dout_words_TVALID;
input   dout_words_TREADY;
output   dout_words_TLAST;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [127:0] din_V_data_V_1_data_out;
reg    din_V_data_V_1_vld_in;
wire    din_V_data_V_1_vld_out;
wire    din_V_data_V_1_ack_in;
wire    din_V_data_V_1_ack_out;
reg    din_V_data_V_1_sel_rd;
wire    din_V_data_V_1_sel;
reg   [1:0] din_V_data_V_1_state;
wire    din_V_tlast_1_data_out;
reg    din_V_tlast_1_vld_in;
wire    din_V_tlast_1_vld_out;
wire    din_V_tlast_1_ack_in;
wire    din_V_tlast_1_ack_out;
reg    din_V_tlast_1_sel_rd;
wire    din_V_tlast_1_sel;
reg   [1:0] din_V_tlast_1_state;
wire   [31:0] control_V_1_data_out;
reg    control_V_1_vld_in;
wire    control_V_1_vld_out;
wire    control_V_1_ack_in;
wire    control_V_1_ack_out;
reg    control_V_1_sel_rd;
wire    control_V_1_sel;
reg   [1:0] control_V_1_state;
wire   [7:0] din_words_V_data_V_1_data_out;
reg    din_words_V_data_V_1_vld_in;
wire    din_words_V_data_V_1_vld_out;
wire    din_words_V_data_V_1_ack_in;
wire    din_words_V_data_V_1_ack_out;
reg    din_words_V_data_V_1_sel_rd;
wire    din_words_V_data_V_1_sel;
reg   [1:0] din_words_V_data_V_1_state;
wire    din_words_V_tlast_1_data_out;
reg    din_words_V_tlast_1_vld_in;
wire    din_words_V_tlast_1_vld_out;
wire    din_words_V_tlast_1_ack_in;
wire    din_words_V_tlast_1_ack_out;
reg    din_words_V_tlast_1_sel_rd;
wire    din_words_V_tlast_1_sel;
reg   [1:0] din_words_V_tlast_1_state;
wire   [7:0] dout_words_V_data_V_1_data_out;
reg    dout_words_V_data_V_1_vld_in;
wire    dout_words_V_data_V_1_vld_out;
wire    dout_words_V_data_V_1_ack_in;
wire    dout_words_V_data_V_1_ack_out;
reg    dout_words_V_data_V_1_sel_rd;
wire    dout_words_V_data_V_1_sel;
reg   [1:0] dout_words_V_data_V_1_state;
wire    dout_words_V_tlast_1_data_out;
reg    dout_words_V_tlast_1_vld_in;
wire    dout_words_V_tlast_1_vld_out;
wire    dout_words_V_tlast_1_ack_in;
wire    dout_words_V_tlast_1_ack_out;
reg    dout_words_V_tlast_1_sel_rd;
wire    dout_words_V_tlast_1_sel;
reg   [1:0] dout_words_V_tlast_1_state;
reg    din_TDATA_blk_n;
wire    ap_CS_fsm_state2;
reg    control_V_TDATA_blk_n;
reg    din_words_TDATA_blk_n;
reg    dout_words_TDATA_blk_n;
reg    ap_block_state1_io;
reg    ap_block_state2;
reg    ap_block_state2_io;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 din_V_data_V_1_sel_rd = 1'b0;
#0 din_V_data_V_1_state = 2'd0;
#0 din_V_tlast_1_sel_rd = 1'b0;
#0 din_V_tlast_1_state = 2'd0;
#0 control_V_1_sel_rd = 1'b0;
#0 control_V_1_state = 2'd0;
#0 din_words_V_data_V_1_sel_rd = 1'b0;
#0 din_words_V_data_V_1_state = 2'd0;
#0 din_words_V_tlast_1_sel_rd = 1'b0;
#0 din_words_V_tlast_1_state = 2'd0;
#0 dout_words_V_data_V_1_sel_rd = 1'b0;
#0 dout_words_V_data_V_1_state = 2'd0;
#0 dout_words_V_tlast_1_sel_rd = 1'b0;
#0 dout_words_V_tlast_1_state = 2'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        control_V_1_sel_rd <= 1'b0;
    end else begin
        if (((control_V_1_ack_out == 1'b1) & (control_V_1_vld_out == 1'b1))) begin
            control_V_1_sel_rd <= ~control_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        control_V_1_state <= 2'd0;
    end else begin
        if ((((control_V_1_state == 2'd2) & (control_V_1_vld_in == 1'b0)) | ((control_V_1_state == 2'd3) & (control_V_1_vld_in == 1'b0) & (control_V_1_ack_out == 1'b1)))) begin
            control_V_1_state <= 2'd2;
        end else if ((((control_V_1_state == 2'd1) & (control_V_1_ack_out == 1'b0)) | ((control_V_1_state == 2'd3) & (control_V_1_ack_out == 1'b0) & (control_V_1_vld_in == 1'b1)))) begin
            control_V_1_state <= 2'd1;
        end else if (((~((control_V_1_vld_in == 1'b0) & (control_V_1_ack_out == 1'b1)) & ~((control_V_1_ack_out == 1'b0) & (control_V_1_vld_in == 1'b1)) & (control_V_1_state == 2'd3)) | ((control_V_1_state == 2'd1) & (control_V_1_ack_out == 1'b1)) | ((control_V_1_state == 2'd2) & (control_V_1_vld_in == 1'b1)))) begin
            control_V_1_state <= 2'd3;
        end else begin
            control_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        din_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((din_V_data_V_1_ack_out == 1'b1) & (din_V_data_V_1_vld_out == 1'b1))) begin
            din_V_data_V_1_sel_rd <= ~din_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        din_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((din_V_data_V_1_state == 2'd2) & (din_V_data_V_1_vld_in == 1'b0)) | ((din_V_data_V_1_state == 2'd3) & (din_V_data_V_1_vld_in == 1'b0) & (din_V_data_V_1_ack_out == 1'b1)))) begin
            din_V_data_V_1_state <= 2'd2;
        end else if ((((din_V_data_V_1_state == 2'd1) & (din_V_data_V_1_ack_out == 1'b0)) | ((din_V_data_V_1_state == 2'd3) & (din_V_data_V_1_ack_out == 1'b0) & (din_V_data_V_1_vld_in == 1'b1)))) begin
            din_V_data_V_1_state <= 2'd1;
        end else if (((~((din_V_data_V_1_vld_in == 1'b0) & (din_V_data_V_1_ack_out == 1'b1)) & ~((din_V_data_V_1_ack_out == 1'b0) & (din_V_data_V_1_vld_in == 1'b1)) & (din_V_data_V_1_state == 2'd3)) | ((din_V_data_V_1_state == 2'd1) & (din_V_data_V_1_ack_out == 1'b1)) | ((din_V_data_V_1_state == 2'd2) & (din_V_data_V_1_vld_in == 1'b1)))) begin
            din_V_data_V_1_state <= 2'd3;
        end else begin
            din_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        din_V_tlast_1_sel_rd <= 1'b0;
    end else begin
        if (((din_V_tlast_1_ack_out == 1'b1) & (din_V_tlast_1_vld_out == 1'b1))) begin
            din_V_tlast_1_sel_rd <= ~din_V_tlast_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        din_V_tlast_1_state <= 2'd0;
    end else begin
        if ((((din_V_tlast_1_state == 2'd2) & (din_V_tlast_1_vld_in == 1'b0)) | ((din_V_tlast_1_state == 2'd3) & (din_V_tlast_1_vld_in == 1'b0) & (din_V_tlast_1_ack_out == 1'b1)))) begin
            din_V_tlast_1_state <= 2'd2;
        end else if ((((din_V_tlast_1_state == 2'd1) & (din_V_tlast_1_ack_out == 1'b0)) | ((din_V_tlast_1_state == 2'd3) & (din_V_tlast_1_ack_out == 1'b0) & (din_V_tlast_1_vld_in == 1'b1)))) begin
            din_V_tlast_1_state <= 2'd1;
        end else if (((~((din_V_tlast_1_vld_in == 1'b0) & (din_V_tlast_1_ack_out == 1'b1)) & ~((din_V_tlast_1_ack_out == 1'b0) & (din_V_tlast_1_vld_in == 1'b1)) & (din_V_tlast_1_state == 2'd3)) | ((din_V_tlast_1_state == 2'd1) & (din_V_tlast_1_ack_out == 1'b1)) | ((din_V_tlast_1_state == 2'd2) & (din_V_tlast_1_vld_in == 1'b1)))) begin
            din_V_tlast_1_state <= 2'd3;
        end else begin
            din_V_tlast_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        din_words_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((din_words_V_data_V_1_ack_out == 1'b1) & (din_words_V_data_V_1_vld_out == 1'b1))) begin
            din_words_V_data_V_1_sel_rd <= ~din_words_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        din_words_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((din_words_V_data_V_1_state == 2'd2) & (din_words_V_data_V_1_vld_in == 1'b0)) | ((din_words_V_data_V_1_state == 2'd3) & (din_words_V_data_V_1_vld_in == 1'b0) & (din_words_V_data_V_1_ack_out == 1'b1)))) begin
            din_words_V_data_V_1_state <= 2'd2;
        end else if ((((din_words_V_data_V_1_state == 2'd1) & (din_words_V_data_V_1_ack_out == 1'b0)) | ((din_words_V_data_V_1_state == 2'd3) & (din_words_V_data_V_1_ack_out == 1'b0) & (din_words_V_data_V_1_vld_in == 1'b1)))) begin
            din_words_V_data_V_1_state <= 2'd1;
        end else if (((~((din_words_V_data_V_1_vld_in == 1'b0) & (din_words_V_data_V_1_ack_out == 1'b1)) & ~((din_words_V_data_V_1_ack_out == 1'b0) & (din_words_V_data_V_1_vld_in == 1'b1)) & (din_words_V_data_V_1_state == 2'd3)) | ((din_words_V_data_V_1_state == 2'd1) & (din_words_V_data_V_1_ack_out == 1'b1)) | ((din_words_V_data_V_1_state == 2'd2) & (din_words_V_data_V_1_vld_in == 1'b1)))) begin
            din_words_V_data_V_1_state <= 2'd3;
        end else begin
            din_words_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        din_words_V_tlast_1_sel_rd <= 1'b0;
    end else begin
        if (((din_words_V_tlast_1_ack_out == 1'b1) & (din_words_V_tlast_1_vld_out == 1'b1))) begin
            din_words_V_tlast_1_sel_rd <= ~din_words_V_tlast_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        din_words_V_tlast_1_state <= 2'd0;
    end else begin
        if ((((din_words_V_tlast_1_state == 2'd2) & (din_words_V_tlast_1_vld_in == 1'b0)) | ((din_words_V_tlast_1_state == 2'd3) & (din_words_V_tlast_1_vld_in == 1'b0) & (din_words_V_tlast_1_ack_out == 1'b1)))) begin
            din_words_V_tlast_1_state <= 2'd2;
        end else if ((((din_words_V_tlast_1_state == 2'd1) & (din_words_V_tlast_1_ack_out == 1'b0)) | ((din_words_V_tlast_1_state == 2'd3) & (din_words_V_tlast_1_ack_out == 1'b0) & (din_words_V_tlast_1_vld_in == 1'b1)))) begin
            din_words_V_tlast_1_state <= 2'd1;
        end else if (((~((din_words_V_tlast_1_vld_in == 1'b0) & (din_words_V_tlast_1_ack_out == 1'b1)) & ~((din_words_V_tlast_1_ack_out == 1'b0) & (din_words_V_tlast_1_vld_in == 1'b1)) & (din_words_V_tlast_1_state == 2'd3)) | ((din_words_V_tlast_1_state == 2'd1) & (din_words_V_tlast_1_ack_out == 1'b1)) | ((din_words_V_tlast_1_state == 2'd2) & (din_words_V_tlast_1_vld_in == 1'b1)))) begin
            din_words_V_tlast_1_state <= 2'd3;
        end else begin
            din_words_V_tlast_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dout_words_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((dout_words_V_data_V_1_ack_out == 1'b1) & (dout_words_V_data_V_1_vld_out == 1'b1))) begin
            dout_words_V_data_V_1_sel_rd <= ~dout_words_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dout_words_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((dout_words_V_data_V_1_state == 2'd2) & (dout_words_V_data_V_1_vld_in == 1'b0)) | ((dout_words_V_data_V_1_state == 2'd3) & (dout_words_V_data_V_1_vld_in == 1'b0) & (dout_words_V_data_V_1_ack_out == 1'b1)))) begin
            dout_words_V_data_V_1_state <= 2'd2;
        end else if ((((dout_words_V_data_V_1_state == 2'd1) & (dout_words_V_data_V_1_ack_out == 1'b0)) | ((dout_words_V_data_V_1_state == 2'd3) & (dout_words_V_data_V_1_ack_out == 1'b0) & (dout_words_V_data_V_1_vld_in == 1'b1)))) begin
            dout_words_V_data_V_1_state <= 2'd1;
        end else if (((~((dout_words_V_data_V_1_vld_in == 1'b0) & (dout_words_V_data_V_1_ack_out == 1'b1)) & ~((dout_words_V_data_V_1_ack_out == 1'b0) & (dout_words_V_data_V_1_vld_in == 1'b1)) & (dout_words_V_data_V_1_state == 2'd3)) | ((dout_words_V_data_V_1_state == 2'd1) & (dout_words_V_data_V_1_ack_out == 1'b1)) | ((dout_words_V_data_V_1_state == 2'd2) & (dout_words_V_data_V_1_vld_in == 1'b1)))) begin
            dout_words_V_data_V_1_state <= 2'd3;
        end else begin
            dout_words_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dout_words_V_tlast_1_sel_rd <= 1'b0;
    end else begin
        if (((dout_words_V_tlast_1_ack_out == 1'b1) & (dout_words_V_tlast_1_vld_out == 1'b1))) begin
            dout_words_V_tlast_1_sel_rd <= ~dout_words_V_tlast_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dout_words_V_tlast_1_state <= 2'd0;
    end else begin
        if ((((dout_words_V_tlast_1_state == 2'd2) & (dout_words_V_tlast_1_vld_in == 1'b0)) | ((dout_words_V_tlast_1_state == 2'd3) & (dout_words_V_tlast_1_vld_in == 1'b0) & (dout_words_V_tlast_1_ack_out == 1'b1)))) begin
            dout_words_V_tlast_1_state <= 2'd2;
        end else if ((((dout_words_V_tlast_1_state == 2'd1) & (dout_words_V_tlast_1_ack_out == 1'b0)) | ((dout_words_V_tlast_1_state == 2'd3) & (dout_words_V_tlast_1_ack_out == 1'b0) & (dout_words_V_tlast_1_vld_in == 1'b1)))) begin
            dout_words_V_tlast_1_state <= 2'd1;
        end else if (((~((dout_words_V_tlast_1_vld_in == 1'b0) & (dout_words_V_tlast_1_ack_out == 1'b1)) & ~((dout_words_V_tlast_1_ack_out == 1'b0) & (dout_words_V_tlast_1_vld_in == 1'b1)) & (dout_words_V_tlast_1_state == 2'd3)) | ((dout_words_V_tlast_1_state == 2'd1) & (dout_words_V_tlast_1_ack_out == 1'b1)) | ((dout_words_V_tlast_1_state == 2'd2) & (dout_words_V_tlast_1_vld_in == 1'b1)))) begin
            dout_words_V_tlast_1_state <= 2'd3;
        end else begin
            dout_words_V_tlast_1_state <= 2'd2;
        end
    end
end

always @ (*) begin
    if ((~((din_V_tlast_1_ack_in == 1'b0) | (dout_words_V_tlast_1_ack_in == 1'b0) | (dout_words_V_data_V_1_ack_in == 1'b0) | (din_V_data_V_1_ack_in == 1'b0) | (din_words_V_tlast_1_ack_in == 1'b0) | (din_words_V_data_V_1_ack_in == 1'b0) | (control_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state2_io)) & (din_V_data_V_1_state[1'd0] == 1'b0) & (dout_words_V_tlast_1_state[1'd0] == 1'b0) & (dout_words_V_data_V_1_state[1'd0] == 1'b0) & (din_words_V_tlast_1_state[1'd0] == 1'b0) & (din_words_V_data_V_1_state[1'd0] == 1'b0) & (control_V_1_state[1'd0] == 1'b0) & (din_V_tlast_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((din_V_tlast_1_ack_in == 1'b0) | (dout_words_V_tlast_1_ack_in == 1'b0) | (dout_words_V_data_V_1_ack_in == 1'b0) | (din_V_data_V_1_ack_in == 1'b0) | (din_words_V_tlast_1_ack_in == 1'b0) | (din_words_V_data_V_1_ack_in == 1'b0) | (control_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state2_io)) & (din_V_data_V_1_state[1'd0] == 1'b0) & (dout_words_V_tlast_1_state[1'd0] == 1'b0) & (dout_words_V_data_V_1_state[1'd0] == 1'b0) & (din_words_V_tlast_1_state[1'd0] == 1'b0) & (din_words_V_data_V_1_state[1'd0] == 1'b0) & (control_V_1_state[1'd0] == 1'b0) & (din_V_tlast_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1))) begin
        control_V_1_vld_in = 1'b1;
    end else begin
        control_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        control_V_TDATA_blk_n = control_V_1_state[1'd1];
    end else begin
        control_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        din_TDATA_blk_n = din_V_data_V_1_state[1'd1];
    end else begin
        din_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1))) begin
        din_V_data_V_1_vld_in = 1'b1;
    end else begin
        din_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1))) begin
        din_V_tlast_1_vld_in = 1'b1;
    end else begin
        din_V_tlast_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        din_words_TDATA_blk_n = din_words_V_data_V_1_state[1'd1];
    end else begin
        din_words_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1))) begin
        din_words_V_data_V_1_vld_in = 1'b1;
    end else begin
        din_words_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1))) begin
        din_words_V_tlast_1_vld_in = 1'b1;
    end else begin
        din_words_V_tlast_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        dout_words_TDATA_blk_n = dout_words_V_data_V_1_state[1'd1];
    end else begin
        dout_words_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1))) begin
        dout_words_V_data_V_1_vld_in = 1'b1;
    end else begin
        dout_words_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1))) begin
        dout_words_V_tlast_1_vld_in = 1'b1;
    end else begin
        dout_words_V_tlast_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((din_V_tlast_1_ack_in == 1'b0) | (dout_words_V_tlast_1_ack_in == 1'b0) | (dout_words_V_data_V_1_ack_in == 1'b0) | (din_V_data_V_1_ack_in == 1'b0) | (din_words_V_tlast_1_ack_in == 1'b0) | (din_words_V_data_V_1_ack_in == 1'b0) | (control_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state2_io)) & (din_V_data_V_1_state[1'd0] == 1'b0) & (dout_words_V_tlast_1_state[1'd0] == 1'b0) & (dout_words_V_data_V_1_state[1'd0] == 1'b0) & (din_words_V_tlast_1_state[1'd0] == 1'b0) & (din_words_V_data_V_1_state[1'd0] == 1'b0) & (control_V_1_state[1'd0] == 1'b0) & (din_V_tlast_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1_io = ((dout_words_V_data_V_1_ack_in == 1'b0) | (din_V_data_V_1_ack_in == 1'b0) | (din_words_V_data_V_1_ack_in == 1'b0) | (control_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state2 = ((din_V_tlast_1_ack_in == 1'b0) | (dout_words_V_tlast_1_ack_in == 1'b0) | (dout_words_V_data_V_1_ack_in == 1'b0) | (din_V_data_V_1_ack_in == 1'b0) | (din_words_V_tlast_1_ack_in == 1'b0) | (din_words_V_data_V_1_ack_in == 1'b0) | (control_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state2_io = ((dout_words_V_data_V_1_ack_in == 1'b0) | (din_V_data_V_1_ack_in == 1'b0) | (din_words_V_data_V_1_ack_in == 1'b0) | (control_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign control_V_1_ack_in = control_V_1_state[1'd1];

assign control_V_1_ack_out = control_V_TREADY;

assign control_V_1_data_out = 32'd4233465604;

assign control_V_1_sel = control_V_1_sel_rd;

assign control_V_1_vld_out = control_V_1_state[1'd0];

assign control_V_TDATA = control_V_1_data_out;

assign control_V_TVALID = control_V_1_state[1'd0];

assign din_TDATA = din_V_data_V_1_data_out;

assign din_TLAST = din_V_tlast_1_data_out;

assign din_TVALID = din_V_tlast_1_state[1'd0];

assign din_V_data_V_1_ack_in = din_V_data_V_1_state[1'd1];

assign din_V_data_V_1_ack_out = din_TREADY;

assign din_V_data_V_1_data_out = 128'd1002319649191;

assign din_V_data_V_1_sel = din_V_data_V_1_sel_rd;

assign din_V_data_V_1_vld_out = din_V_data_V_1_state[1'd0];

assign din_V_tlast_1_ack_in = din_V_tlast_1_state[1'd1];

assign din_V_tlast_1_ack_out = din_TREADY;

assign din_V_tlast_1_data_out = 1'd1;

assign din_V_tlast_1_sel = din_V_tlast_1_sel_rd;

assign din_V_tlast_1_vld_out = din_V_tlast_1_state[1'd0];

assign din_words_TDATA = din_words_V_data_V_1_data_out;

assign din_words_TLAST = din_words_V_tlast_1_data_out;

assign din_words_TVALID = din_words_V_tlast_1_state[1'd0];

assign din_words_V_data_V_1_ack_in = din_words_V_data_V_1_state[1'd1];

assign din_words_V_data_V_1_ack_out = din_words_TREADY;

assign din_words_V_data_V_1_data_out = 8'd5;

assign din_words_V_data_V_1_sel = din_words_V_data_V_1_sel_rd;

assign din_words_V_data_V_1_vld_out = din_words_V_data_V_1_state[1'd0];

assign din_words_V_tlast_1_ack_in = din_words_V_tlast_1_state[1'd1];

assign din_words_V_tlast_1_ack_out = din_words_TREADY;

assign din_words_V_tlast_1_data_out = 1'd1;

assign din_words_V_tlast_1_sel = din_words_V_tlast_1_sel_rd;

assign din_words_V_tlast_1_vld_out = din_words_V_tlast_1_state[1'd0];

assign dout_words_TDATA = dout_words_V_data_V_1_data_out;

assign dout_words_TLAST = dout_words_V_tlast_1_data_out;

assign dout_words_TVALID = dout_words_V_tlast_1_state[1'd0];

assign dout_words_V_data_V_1_ack_in = dout_words_V_data_V_1_state[1'd1];

assign dout_words_V_data_V_1_ack_out = dout_words_TREADY;

assign dout_words_V_data_V_1_data_out = 8'd16;

assign dout_words_V_data_V_1_sel = dout_words_V_data_V_1_sel_rd;

assign dout_words_V_data_V_1_vld_out = dout_words_V_data_V_1_state[1'd0];

assign dout_words_V_tlast_1_ack_in = dout_words_V_tlast_1_state[1'd1];

assign dout_words_V_tlast_1_ack_out = dout_words_TREADY;

assign dout_words_V_tlast_1_data_out = 1'd1;

assign dout_words_V_tlast_1_sel = dout_words_V_tlast_1_sel_rd;

assign dout_words_V_tlast_1_vld_out = dout_words_V_tlast_1_state[1'd0];

endmodule //datag
